{
  "$ref": "#/definitions/ts.AggregateInterfaceForJsonSchemaExtraction",
  "definitions": {
    "ts.AggregateInterfaceForJsonSchemaExtraction": {
      "type": "object",
      "properties": {
        "Node": {
          "$ref": "#/definitions/ts.Node"
        },
        "JSDocContainer": {
          "$ref": "#/definitions/ts.JSDocContainer"
        },
        "StringLiteral": {
          "$ref": "#/definitions/ts.StringLiteral"
        },
        "StringLiteralLike": {
          "$ref": "#/definitions/ts.StringLiteralLike"
        },
        "Expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "OmittedExpression": {
          "$ref": "#/definitions/ts.OmittedExpression"
        },
        "PartiallyEmittedExpression": {
          "$ref": "#/definitions/ts.PartiallyEmittedExpression"
        },
        "UnaryExpression": {
          "$ref": "#/definitions/ts.UnaryExpression"
        },
        "IncrementExpression": {
          "$ref": "#/definitions/ts.UpdateExpression"
        },
        "UpdateExpression": {
          "$ref": "#/definitions/ts.UpdateExpression"
        },
        "PrefixUnaryOperator": {
          "$ref": "#/definitions/ts.PrefixUnaryOperator"
        },
        "PrefixUnaryExpression": {
          "$ref": "#/definitions/ts.PrefixUnaryExpression"
        },
        "PostfixUnaryOperator": {
          "$ref": "#/definitions/ts.PostfixUnaryOperator"
        },
        "PostfixUnaryExpression": {
          "$ref": "#/definitions/ts.PostfixUnaryExpression"
        },
        "LeftHandSideExpression": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "MemberExpression": {
          "$ref": "#/definitions/ts.MemberExpression"
        },
        "PrimaryExpression": {
          "$ref": "#/definitions/ts.PrimaryExpression"
        },
        "NullLiteral": {
          "$ref": "#/definitions/ts.NullLiteral"
        },
        "BooleanLiteral": {
          "$ref": "#/definitions/ts.BooleanLiteral"
        },
        "ThisExpression": {
          "$ref": "#/definitions/ts.ThisExpression"
        },
        "SuperExpression": {
          "$ref": "#/definitions/ts.SuperExpression"
        },
        "ImportExpression": {
          "$ref": "#/definitions/ts.ImportExpression"
        },
        "DeleteExpression": {
          "$ref": "#/definitions/ts.DeleteExpression"
        },
        "TypeOfExpression": {
          "$ref": "#/definitions/ts.TypeOfExpression"
        },
        "VoidExpression": {
          "$ref": "#/definitions/ts.VoidExpression"
        },
        "AwaitExpression": {
          "$ref": "#/definitions/ts.AwaitExpression"
        },
        "YieldExpression": {
          "$ref": "#/definitions/ts.YieldExpression"
        },
        "SyntheticExpression": {
          "$ref": "#/definitions/ts.SyntheticExpression"
        },
        "ExponentiationOperator": {
          "$ref": "#/definitions/ts.SyntaxKind.AsteriskAsteriskToken"
        },
        "MultiplicativeOperator": {
          "$ref": "#/definitions/ts.MultiplicativeOperator"
        },
        "MultiplicativeOperatorOrHigher": {
          "$ref": "#/definitions/ts.MultiplicativeOperatorOrHigher"
        },
        "AdditiveOperator": {
          "$ref": "#/definitions/ts.AdditiveOperator"
        },
        "AdditiveOperatorOrHigher": {
          "$ref": "#/definitions/ts.AdditiveOperatorOrHigher"
        },
        "ShiftOperator": {
          "$ref": "#/definitions/ts.ShiftOperator"
        },
        "ShiftOperatorOrHigher": {
          "$ref": "#/definitions/ts.ShiftOperatorOrHigher"
        },
        "RelationalOperator": {
          "$ref": "#/definitions/ts.RelationalOperator"
        },
        "RelationalOperatorOrHigher": {
          "$ref": "#/definitions/ts.RelationalOperatorOrHigher"
        },
        "EqualityOperator": {
          "$ref": "#/definitions/ts.EqualityOperator"
        },
        "EqualityOperatorOrHigher": {
          "$ref": "#/definitions/ts.EqualityOperatorOrHigher"
        },
        "BitwiseOperator": {
          "$ref": "#/definitions/ts.BitwiseOperator"
        },
        "BitwiseOperatorOrHigher": {
          "$ref": "#/definitions/ts.BitwiseOperatorOrHigher"
        },
        "LogicalOperator": {
          "$ref": "#/definitions/ts.LogicalOperator"
        },
        "LogicalOperatorOrHigher": {
          "$ref": "#/definitions/ts.LogicalOperatorOrHigher"
        },
        "CompoundAssignmentOperator": {
          "$ref": "#/definitions/ts.CompoundAssignmentOperator"
        },
        "AssignmentOperator": {
          "$ref": "#/definitions/ts.AssignmentOperator"
        },
        "AssignmentOperatorOrHigher": {
          "$ref": "#/definitions/ts.AssignmentOperatorOrHigher"
        },
        "BinaryOperator": {
          "$ref": "#/definitions/ts.BinaryOperator"
        },
        "BinaryOperatorToken": {
          "$ref": "#/definitions/ts.Token_3"
        },
        "BinaryExpression": {
          "$ref": "#/definitions/ts.BinaryExpression"
        },
        "AssignmentOperatorToken": {
          "$ref": "#/definitions/ts.Token_4"
        },
        "ObjectDestructuringAssignment": {
          "$ref": "#/definitions/ts.ObjectDestructuringAssignment"
        },
        "ArrayDestructuringAssignment": {
          "$ref": "#/definitions/ts.ArrayDestructuringAssignment"
        },
        "DestructuringAssignment": {
          "$ref": "#/definitions/ts.DestructuringAssignment"
        },
        "BindingOrAssignmentElement": {
          "$ref": "#/definitions/ts.BindingOrAssignmentElement"
        },
        "BindingOrAssignmentElementRestIndicator": {
          "$ref": "#/definitions/ts.BindingOrAssignmentElementRestIndicator"
        },
        "BindingOrAssignmentElementTarget": {
          "$ref": "#/definitions/ts.BindingOrAssignmentElementTarget"
        },
        "ObjectBindingOrAssignmentPattern": {
          "$ref": "#/definitions/ts.ObjectBindingOrAssignmentPattern"
        },
        "ArrayBindingOrAssignmentPattern": {
          "$ref": "#/definitions/ts.ArrayBindingOrAssignmentPattern"
        },
        "AssignmentPattern": {
          "$ref": "#/definitions/ts.AssignmentPattern"
        },
        "BindingOrAssignmentPattern": {
          "$ref": "#/definitions/ts.BindingOrAssignmentPattern"
        },
        "ConditionalExpression": {
          "$ref": "#/definitions/ts.ConditionalExpression"
        },
        "FunctionBody": {
          "$ref": "#/definitions/ts.Block"
        },
        "ConciseBody": {
          "$ref": "#/definitions/ts.ConciseBody"
        },
        "FunctionExpression": {
          "$ref": "#/definitions/ts.FunctionExpression"
        },
        "ArrowFunction": {
          "$ref": "#/definitions/ts.ArrowFunction"
        },
        "LiteralLikeNode": {
          "$ref": "#/definitions/ts.LiteralLikeNode"
        },
        "TemplateLiteralLikeNode": {
          "$ref": "#/definitions/ts.TemplateLiteralLikeNode"
        },
        "LiteralExpression": {
          "$ref": "#/definitions/ts.LiteralExpression"
        },
        "RegularExpressionLiteral": {
          "$ref": "#/definitions/ts.RegularExpressionLiteral"
        },
        "NoSubstitutionTemplateLiteral": {
          "$ref": "#/definitions/ts.NoSubstitutionTemplateLiteral"
        },
        "TokenFlags": {
          "$ref": "#/definitions/ts.TokenFlags"
        },
        "NumericLiteral": {
          "$ref": "#/definitions/ts.NumericLiteral"
        },
        "BigIntLiteral": {
          "$ref": "#/definitions/ts.BigIntLiteral"
        },
        "TemplateHead": {
          "$ref": "#/definitions/ts.TemplateHead"
        },
        "TemplateMiddle": {
          "$ref": "#/definitions/ts.TemplateMiddle"
        },
        "TemplateTail": {
          "$ref": "#/definitions/ts.TemplateTail"
        },
        "TemplateLiteral": {
          "$ref": "#/definitions/ts.TemplateLiteral"
        },
        "TemplateExpression": {
          "$ref": "#/definitions/ts.TemplateExpression"
        },
        "TemplateSpan": {
          "$ref": "#/definitions/ts.TemplateSpan"
        },
        "ParenthesizedExpression": {
          "$ref": "#/definitions/ts.ParenthesizedExpression"
        },
        "ArrayLiteralExpression": {
          "$ref": "#/definitions/ts.ArrayLiteralExpression"
        },
        "SpreadElement": {
          "$ref": "#/definitions/ts.SpreadElement"
        },
        "ObjectLiteralExpression": {
          "$ref": "#/definitions/ts.ObjectLiteralExpression"
        },
        "EntityNameExpression": {
          "$ref": "#/definitions/ts.EntityNameExpression"
        },
        "EntityNameOrEntityNameExpression": {
          "$ref": "#/definitions/ts.EntityNameOrEntityNameExpression"
        },
        "AccessExpression": {
          "$ref": "#/definitions/ts.AccessExpression"
        },
        "PropertyAccessExpression": {
          "$ref": "#/definitions/ts.PropertyAccessExpression"
        },
        "PrivateIdentifierPropertyAccessExpression": {
          "$ref": "#/definitions/ts.PrivateIdentifierPropertyAccessExpression"
        },
        "PropertyAccessChain": {
          "$ref": "#/definitions/ts.PropertyAccessChain"
        },
        "PropertyAccessChainRoot": {
          "$ref": "#/definitions/ts.PropertyAccessChainRoot"
        },
        "SuperPropertyAccessExpression": {
          "$ref": "#/definitions/ts.SuperPropertyAccessExpression"
        },
        "PropertyAccessEntityNameExpression": {
          "$ref": "#/definitions/ts.PropertyAccessEntityNameExpression"
        },
        "ElementAccessExpression": {
          "$ref": "#/definitions/ts.ElementAccessExpression"
        },
        "ElementAccessChain": {
          "$ref": "#/definitions/ts.ElementAccessChain"
        },
        "ElementAccessChainRoot": {
          "$ref": "#/definitions/ts.ElementAccessChainRoot"
        },
        "SuperElementAccessExpression": {
          "$ref": "#/definitions/ts.SuperElementAccessExpression"
        },
        "SuperProperty": {
          "$ref": "#/definitions/ts.SuperProperty"
        },
        "CallExpression": {
          "$ref": "#/definitions/ts.CallExpression"
        },
        "CallChain": {
          "$ref": "#/definitions/ts.CallChain"
        },
        "CallChainRoot": {
          "$ref": "#/definitions/ts.CallChainRoot"
        },
        "OptionalChain": {
          "$ref": "#/definitions/ts.OptionalChain"
        },
        "OptionalChainRoot": {
          "$ref": "#/definitions/ts.OptionalChainRoot"
        },
        "WellKnownSymbolExpression": {
          "$ref": "#/definitions/ts.WellKnownSymbolExpression"
        },
        "BindableObjectDefinePropertyCall": {
          "$ref": "#/definitions/ts.BindableObjectDefinePropertyCall"
        },
        "BindableStaticNameExpression": {
          "$ref": "#/definitions/ts.BindableStaticNameExpression"
        },
        "LiteralLikeElementAccessExpression": {
          "$ref": "#/definitions/ts.LiteralLikeElementAccessExpression"
        },
        "BindableStaticElementAccessExpression": {
          "$ref": "#/definitions/ts.BindableStaticElementAccessExpression"
        },
        "BindableElementAccessExpression": {
          "$ref": "#/definitions/ts.BindableElementAccessExpression"
        },
        "BindableStaticAccessExpression": {
          "$ref": "#/definitions/ts.BindableStaticAccessExpression"
        },
        "BindableAccessExpression": {
          "$ref": "#/definitions/ts.BindableAccessExpression"
        },
        "BindableStaticPropertyAssignmentExpression": {
          "$ref": "#/definitions/ts.BindableStaticPropertyAssignmentExpression"
        },
        "BindablePropertyAssignmentExpression": {
          "$ref": "#/definitions/ts.BindablePropertyAssignmentExpression"
        },
        "SuperCall": {
          "$ref": "#/definitions/ts.SuperCall"
        },
        "ImportCall": {
          "$ref": "#/definitions/ts.ImportCall"
        },
        "ExpressionWithTypeArguments": {
          "$ref": "#/definitions/ts.ExpressionWithTypeArguments"
        },
        "NewExpression": {
          "$ref": "#/definitions/ts.NewExpression"
        },
        "TaggedTemplateExpression": {
          "$ref": "#/definitions/ts.TaggedTemplateExpression"
        },
        "CallLikeExpression": {
          "$ref": "#/definitions/ts.CallLikeExpression"
        },
        "AsExpression": {
          "$ref": "#/definitions/ts.AsExpression"
        },
        "TypeAssertion": {
          "$ref": "#/definitions/ts.TypeAssertion"
        },
        "AssertionExpression": {
          "$ref": "#/definitions/ts.AssertionExpression"
        },
        "NonNullExpression": {
          "$ref": "#/definitions/ts.NonNullExpression"
        },
        "MetaProperty": {
          "$ref": "#/definitions/ts.MetaProperty"
        },
        "ImportMetaProperty": {
          "$ref": "#/definitions/ts.ImportMetaProperty"
        },
        "JsxElement": {
          "$ref": "#/definitions/ts.JsxElement"
        },
        "JsxOpeningLikeElement": {
          "$ref": "#/definitions/ts.JsxOpeningLikeElement"
        },
        "JsxAttributeLike": {
          "$ref": "#/definitions/ts.JsxAttributeLike"
        },
        "JsxTagNameExpression": {
          "$ref": "#/definitions/ts.JsxTagNameExpression"
        },
        "JsxTagNamePropertyAccess": {
          "$ref": "#/definitions/ts.JsxTagNamePropertyAccess"
        },
        "JsxAttributes": {
          "$ref": "#/definitions/ts.JsxAttributes"
        },
        "JsxOpeningElement": {
          "$ref": "#/definitions/ts.JsxOpeningElement"
        },
        "JsxSelfClosingElement": {
          "$ref": "#/definitions/ts.JsxSelfClosingElement"
        },
        "JsxFragment": {
          "$ref": "#/definitions/ts.JsxFragment"
        },
        "JsxOpeningFragment": {
          "$ref": "#/definitions/ts.JsxOpeningFragment"
        },
        "JsxClosingFragment": {
          "$ref": "#/definitions/ts.JsxClosingFragment"
        },
        "JsxAttribute": {
          "$ref": "#/definitions/ts.JsxAttribute"
        },
        "JsxSpreadAttribute": {
          "$ref": "#/definitions/ts.JsxSpreadAttribute"
        },
        "JsxClosingElement": {
          "$ref": "#/definitions/ts.JsxClosingElement"
        },
        "JsxExpression": {
          "$ref": "#/definitions/ts.JsxExpression"
        },
        "JsxText": {
          "$ref": "#/definitions/ts.JsxText"
        },
        "JsxChild": {
          "$ref": "#/definitions/ts.JsxChild"
        },
        "Statement": {
          "$ref": "#/definitions/ts.Statement"
        },
        "NotEmittedStatement": {
          "$ref": "#/definitions/ts.NotEmittedStatement"
        },
        "EndOfDeclarationMarker": {
          "$ref": "#/definitions/ts.EndOfDeclarationMarker"
        },
        "CommaListExpression": {
          "$ref": "#/definitions/ts.CommaListExpression"
        },
        "MergeDeclarationMarker": {
          "$ref": "#/definitions/ts.MergeDeclarationMarker"
        },
        "SyntheticReferenceExpression": {
          "$ref": "#/definitions/ts.SyntheticReferenceExpression"
        },
        "EmptyStatement": {
          "$ref": "#/definitions/ts.EmptyStatement"
        },
        "DebuggerStatement": {
          "$ref": "#/definitions/ts.DebuggerStatement"
        },
        "MissingDeclaration": {
          "$ref": "#/definitions/ts.MissingDeclaration"
        },
        "BlockLike": {
          "$ref": "#/definitions/ts.BlockLike"
        },
        "Block": {
          "$ref": "#/definitions/ts.Block"
        },
        "VariableStatement": {
          "$ref": "#/definitions/ts.VariableStatement"
        },
        "ExpressionStatement": {
          "$ref": "#/definitions/ts.ExpressionStatement"
        },
        "PrologueDirective": {
          "$ref": "#/definitions/ts.PrologueDirective"
        },
        "IfStatement": {
          "$ref": "#/definitions/ts.IfStatement"
        },
        "IterationStatement": {
          "$ref": "#/definitions/ts.IterationStatement"
        },
        "DoStatement": {
          "$ref": "#/definitions/ts.DoStatement"
        },
        "WhileStatement": {
          "$ref": "#/definitions/ts.WhileStatement"
        },
        "ForInitializer": {
          "$ref": "#/definitions/ts.ForInitializer"
        },
        "ForStatement": {
          "$ref": "#/definitions/ts.ForStatement"
        },
        "ForInOrOfStatement": {
          "$ref": "#/definitions/ts.ForInOrOfStatement"
        },
        "ForInStatement": {
          "$ref": "#/definitions/ts.ForInStatement"
        },
        "ForOfStatement": {
          "$ref": "#/definitions/ts.ForOfStatement"
        },
        "BreakStatement": {
          "$ref": "#/definitions/ts.BreakStatement"
        },
        "ContinueStatement": {
          "$ref": "#/definitions/ts.ContinueStatement"
        },
        "BreakOrContinueStatement": {
          "$ref": "#/definitions/ts.BreakOrContinueStatement"
        },
        "ReturnStatement": {
          "$ref": "#/definitions/ts.ReturnStatement"
        },
        "WithStatement": {
          "$ref": "#/definitions/ts.WithStatement"
        },
        "SwitchStatement": {
          "$ref": "#/definitions/ts.SwitchStatement"
        },
        "CaseBlock": {
          "$ref": "#/definitions/ts.CaseBlock"
        },
        "CaseClause": {
          "$ref": "#/definitions/ts.CaseClause"
        },
        "DefaultClause": {
          "$ref": "#/definitions/ts.DefaultClause"
        },
        "CaseOrDefaultClause": {
          "$ref": "#/definitions/ts.CaseOrDefaultClause"
        },
        "LabeledStatement": {
          "$ref": "#/definitions/ts.LabeledStatement"
        },
        "ThrowStatement": {
          "$ref": "#/definitions/ts.ThrowStatement"
        },
        "TryStatement": {
          "$ref": "#/definitions/ts.TryStatement"
        },
        "CatchClause": {
          "$ref": "#/definitions/ts.CatchClause"
        },
        "ObjectTypeDeclaration": {
          "$ref": "#/definitions/ts.ObjectTypeDeclaration"
        },
        "DeclarationWithTypeParameters": {
          "$ref": "#/definitions/ts.DeclarationWithTypeParameters"
        },
        "DeclarationWithTypeParameterChildren": {
          "$ref": "#/definitions/ts.DeclarationWithTypeParameterChildren"
        },
        "ClassLikeDeclarationBase": {
          "$ref": "#/definitions/ts.ClassLikeDeclarationBase"
        },
        "ClassDeclaration": {
          "$ref": "#/definitions/ts.ClassDeclaration"
        },
        "ClassExpression": {
          "$ref": "#/definitions/ts.ClassExpression"
        },
        "ClassLikeDeclaration": {
          "$ref": "#/definitions/ts.ClassLikeDeclaration"
        },
        "ClassElement": {
          "$ref": "#/definitions/ts.ClassElement"
        },
        "TypeElement": {
          "$ref": "#/definitions/ts.TypeElement"
        },
        "InterfaceDeclaration": {
          "$ref": "#/definitions/ts.InterfaceDeclaration"
        },
        "HeritageClause": {
          "$ref": "#/definitions/ts.HeritageClause"
        },
        "TypeAliasDeclaration": {
          "$ref": "#/definitions/ts.TypeAliasDeclaration"
        },
        "EnumMember": {
          "$ref": "#/definitions/ts.EnumMember"
        },
        "EnumDeclaration": {
          "$ref": "#/definitions/ts.EnumDeclaration"
        },
        "ModuleName": {
          "$ref": "#/definitions/ts.ModuleName"
        },
        "ModuleBody": {
          "$ref": "#/definitions/ts.ModuleBody"
        },
        "AmbientModuleDeclaration": {
          "$ref": "#/definitions/ts.AmbientModuleDeclaration"
        },
        "ModuleDeclaration": {
          "$ref": "#/definitions/ts.ModuleDeclaration"
        },
        "NamespaceBody": {
          "$ref": "#/definitions/ts.NamespaceBody"
        },
        "NamespaceDeclaration": {
          "$ref": "#/definitions/ts.NamespaceDeclaration"
        },
        "JSDocNamespaceBody": {
          "$ref": "#/definitions/ts.JSDocNamespaceBody"
        },
        "JSDocNamespaceDeclaration": {
          "$ref": "#/definitions/ts.JSDocNamespaceDeclaration"
        },
        "ModuleBlock": {
          "$ref": "#/definitions/ts.ModuleBlock"
        },
        "ModuleReference": {
          "$ref": "#/definitions/ts.ModuleReference"
        },
        "ImportEqualsDeclaration": {
          "$ref": "#/definitions/ts.ImportEqualsDeclaration"
        },
        "ExternalModuleReference": {
          "$ref": "#/definitions/ts.ExternalModuleReference"
        },
        "ImportDeclaration": {
          "$ref": "#/definitions/ts.ImportDeclaration"
        },
        "NamedImportBindings": {
          "$ref": "#/definitions/ts.NamedImportBindings"
        },
        "NamedExportBindings": {
          "$ref": "#/definitions/ts.NamedExportBindings"
        },
        "ImportClause": {
          "$ref": "#/definitions/ts.ImportClause"
        },
        "NamespaceImport": {
          "$ref": "#/definitions/ts.NamespaceImport"
        },
        "NamespaceExport": {
          "$ref": "#/definitions/ts.NamespaceExport"
        },
        "NamespaceExportDeclaration": {
          "$ref": "#/definitions/ts.NamespaceExportDeclaration"
        },
        "ExportDeclaration": {
          "$ref": "#/definitions/ts.ExportDeclaration"
        },
        "NamedImports": {
          "$ref": "#/definitions/ts.NamedImports"
        },
        "NamedExports": {
          "$ref": "#/definitions/ts.NamedExports"
        },
        "NamedImportsOrExports": {
          "$ref": "#/definitions/ts.NamedImportsOrExports"
        },
        "ImportSpecifier": {
          "$ref": "#/definitions/ts.ImportSpecifier"
        },
        "ExportSpecifier": {
          "$ref": "#/definitions/ts.ExportSpecifier"
        },
        "ImportOrExportSpecifier": {
          "$ref": "#/definitions/ts.ImportOrExportSpecifier"
        },
        "TypeOnlyCompatibleAliasDeclaration": {
          "$ref": "#/definitions/ts.TypeOnlyCompatibleAliasDeclaration"
        },
        "ExportAssignment": {
          "$ref": "#/definitions/ts.ExportAssignment"
        },
        "FileReference": {
          "$ref": "#/definitions/ts.FileReference"
        },
        "CheckJsDirective": {
          "$ref": "#/definitions/ts.CheckJsDirective"
        },
        "CommentKind": {
          "$ref": "#/definitions/ts.CommentKind"
        },
        "CommentRange": {
          "$ref": "#/definitions/ts.CommentRange"
        },
        "SynthesizedComment": {
          "$ref": "#/definitions/ts.SynthesizedComment"
        },
        "JSDocTypeExpression": {
          "$ref": "#/definitions/ts.JSDocTypeExpression"
        },
        "JSDocType": {
          "$ref": "#/definitions/ts.JSDocType"
        },
        "JSDocAllType": {
          "$ref": "#/definitions/ts.JSDocAllType"
        },
        "JSDocUnknownType": {
          "$ref": "#/definitions/ts.JSDocUnknownType"
        },
        "JSDocNonNullableType": {
          "$ref": "#/definitions/ts.JSDocNonNullableType"
        },
        "JSDocNullableType": {
          "$ref": "#/definitions/ts.JSDocNullableType"
        },
        "JSDocOptionalType": {
          "$ref": "#/definitions/ts.JSDocOptionalType"
        },
        "JSDocFunctionType": {
          "$ref": "#/definitions/ts.JSDocFunctionType"
        },
        "JSDocVariadicType": {
          "$ref": "#/definitions/ts.JSDocVariadicType"
        },
        "JSDocNamepathType": {
          "$ref": "#/definitions/ts.JSDocNamepathType"
        },
        "JSDocTypeReferencingNode": {
          "$ref": "#/definitions/ts.JSDocTypeReferencingNode"
        },
        "JSDoc": {
          "$ref": "#/definitions/ts.JSDoc"
        },
        "JSDocTag": {
          "$ref": "#/definitions/ts.JSDocTag"
        },
        "JSDocUnknownTag": {
          "$ref": "#/definitions/ts.JSDocUnknownTag"
        },
        "JSDocAugmentsTag": {
          "$ref": "#/definitions/ts.JSDocAugmentsTag"
        },
        "JSDocAuthorTag": {
          "$ref": "#/definitions/ts.JSDocAuthorTag"
        },
        "JSDocClassTag": {
          "$ref": "#/definitions/ts.JSDocClassTag"
        },
        "JSDocPublicTag": {
          "$ref": "#/definitions/ts.JSDocPublicTag"
        },
        "JSDocPrivateTag": {
          "$ref": "#/definitions/ts.JSDocPrivateTag"
        },
        "JSDocProtectedTag": {
          "$ref": "#/definitions/ts.JSDocProtectedTag"
        },
        "JSDocReadonlyTag": {
          "$ref": "#/definitions/ts.JSDocReadonlyTag"
        },
        "JSDocEnumTag": {
          "$ref": "#/definitions/ts.JSDocEnumTag"
        },
        "JSDocThisTag": {
          "$ref": "#/definitions/ts.JSDocThisTag"
        },
        "JSDocTemplateTag": {
          "$ref": "#/definitions/ts.JSDocTemplateTag"
        },
        "JSDocReturnTag": {
          "$ref": "#/definitions/ts.JSDocReturnTag"
        },
        "JSDocTypeTag": {
          "$ref": "#/definitions/ts.JSDocTypeTag"
        },
        "JSDocTypedefTag": {
          "$ref": "#/definitions/ts.JSDocTypedefTag"
        },
        "JSDocCallbackTag": {
          "$ref": "#/definitions/ts.JSDocCallbackTag"
        },
        "JSDocSignature": {
          "$ref": "#/definitions/ts.JSDocSignature"
        },
        "JSDocPropertyLikeTag": {
          "$ref": "#/definitions/ts.JSDocPropertyLikeTag"
        },
        "JSDocPropertyTag": {
          "$ref": "#/definitions/ts.JSDocPropertyTag"
        },
        "JSDocParameterTag": {
          "$ref": "#/definitions/ts.JSDocParameterTag"
        },
        "JSDocTypeLiteral": {
          "$ref": "#/definitions/ts.JSDocTypeLiteral"
        }
      },
      "required": [
        "AccessExpression",
        "AdditiveOperator",
        "AdditiveOperatorOrHigher",
        "AmbientModuleDeclaration",
        "ArrayBindingOrAssignmentPattern",
        "ArrayDestructuringAssignment",
        "ArrayLiteralExpression",
        "ArrowFunction",
        "AsExpression",
        "AssertionExpression",
        "AssignmentOperator",
        "AssignmentOperatorOrHigher",
        "AssignmentOperatorToken",
        "AssignmentPattern",
        "AwaitExpression",
        "BigIntLiteral",
        "BinaryExpression",
        "BinaryOperator",
        "BinaryOperatorToken",
        "BindableAccessExpression",
        "BindableElementAccessExpression",
        "BindableObjectDefinePropertyCall",
        "BindablePropertyAssignmentExpression",
        "BindableStaticAccessExpression",
        "BindableStaticElementAccessExpression",
        "BindableStaticNameExpression",
        "BindableStaticPropertyAssignmentExpression",
        "BindingOrAssignmentElement",
        "BindingOrAssignmentElementRestIndicator",
        "BindingOrAssignmentElementTarget",
        "BindingOrAssignmentPattern",
        "BitwiseOperator",
        "BitwiseOperatorOrHigher",
        "Block",
        "BlockLike",
        "BooleanLiteral",
        "BreakOrContinueStatement",
        "BreakStatement",
        "CallChain",
        "CallChainRoot",
        "CallExpression",
        "CallLikeExpression",
        "CaseBlock",
        "CaseClause",
        "CaseOrDefaultClause",
        "CatchClause",
        "CheckJsDirective",
        "ClassDeclaration",
        "ClassElement",
        "ClassExpression",
        "ClassLikeDeclaration",
        "ClassLikeDeclarationBase",
        "CommaListExpression",
        "CommentKind",
        "CommentRange",
        "CompoundAssignmentOperator",
        "ConciseBody",
        "ConditionalExpression",
        "ContinueStatement",
        "DebuggerStatement",
        "DeclarationWithTypeParameterChildren",
        "DeclarationWithTypeParameters",
        "DefaultClause",
        "DeleteExpression",
        "DestructuringAssignment",
        "DoStatement",
        "ElementAccessChain",
        "ElementAccessChainRoot",
        "ElementAccessExpression",
        "EmptyStatement",
        "EndOfDeclarationMarker",
        "EntityNameExpression",
        "EntityNameOrEntityNameExpression",
        "EnumDeclaration",
        "EnumMember",
        "EqualityOperator",
        "EqualityOperatorOrHigher",
        "ExponentiationOperator",
        "ExportAssignment",
        "ExportDeclaration",
        "ExportSpecifier",
        "Expression",
        "ExpressionStatement",
        "ExpressionWithTypeArguments",
        "ExternalModuleReference",
        "FileReference",
        "ForInOrOfStatement",
        "ForInStatement",
        "ForInitializer",
        "ForOfStatement",
        "ForStatement",
        "FunctionBody",
        "FunctionExpression",
        "HeritageClause",
        "IfStatement",
        "ImportCall",
        "ImportClause",
        "ImportDeclaration",
        "ImportEqualsDeclaration",
        "ImportExpression",
        "ImportMetaProperty",
        "ImportOrExportSpecifier",
        "ImportSpecifier",
        "IncrementExpression",
        "InterfaceDeclaration",
        "IterationStatement",
        "JSDoc",
        "JSDocAllType",
        "JSDocAugmentsTag",
        "JSDocAuthorTag",
        "JSDocCallbackTag",
        "JSDocClassTag",
        "JSDocContainer",
        "JSDocEnumTag",
        "JSDocFunctionType",
        "JSDocNamepathType",
        "JSDocNamespaceBody",
        "JSDocNamespaceDeclaration",
        "JSDocNonNullableType",
        "JSDocNullableType",
        "JSDocOptionalType",
        "JSDocParameterTag",
        "JSDocPrivateTag",
        "JSDocPropertyLikeTag",
        "JSDocPropertyTag",
        "JSDocProtectedTag",
        "JSDocPublicTag",
        "JSDocReadonlyTag",
        "JSDocReturnTag",
        "JSDocSignature",
        "JSDocTag",
        "JSDocTemplateTag",
        "JSDocThisTag",
        "JSDocType",
        "JSDocTypeExpression",
        "JSDocTypeLiteral",
        "JSDocTypeReferencingNode",
        "JSDocTypeTag",
        "JSDocTypedefTag",
        "JSDocUnknownTag",
        "JSDocUnknownType",
        "JSDocVariadicType",
        "JsxAttribute",
        "JsxAttributeLike",
        "JsxAttributes",
        "JsxChild",
        "JsxClosingElement",
        "JsxClosingFragment",
        "JsxElement",
        "JsxExpression",
        "JsxFragment",
        "JsxOpeningElement",
        "JsxOpeningFragment",
        "JsxOpeningLikeElement",
        "JsxSelfClosingElement",
        "JsxSpreadAttribute",
        "JsxTagNameExpression",
        "JsxTagNamePropertyAccess",
        "JsxText",
        "LabeledStatement",
        "LeftHandSideExpression",
        "LiteralExpression",
        "LiteralLikeElementAccessExpression",
        "LiteralLikeNode",
        "LogicalOperator",
        "LogicalOperatorOrHigher",
        "MemberExpression",
        "MergeDeclarationMarker",
        "MetaProperty",
        "MissingDeclaration",
        "ModuleBlock",
        "ModuleBody",
        "ModuleDeclaration",
        "ModuleName",
        "ModuleReference",
        "MultiplicativeOperator",
        "MultiplicativeOperatorOrHigher",
        "NamedExportBindings",
        "NamedExports",
        "NamedImportBindings",
        "NamedImports",
        "NamedImportsOrExports",
        "NamespaceBody",
        "NamespaceDeclaration",
        "NamespaceExport",
        "NamespaceExportDeclaration",
        "NamespaceImport",
        "NewExpression",
        "NoSubstitutionTemplateLiteral",
        "Node",
        "NonNullExpression",
        "NotEmittedStatement",
        "NullLiteral",
        "NumericLiteral",
        "ObjectBindingOrAssignmentPattern",
        "ObjectDestructuringAssignment",
        "ObjectLiteralExpression",
        "ObjectTypeDeclaration",
        "OmittedExpression",
        "OptionalChain",
        "OptionalChainRoot",
        "ParenthesizedExpression",
        "PartiallyEmittedExpression",
        "PostfixUnaryExpression",
        "PostfixUnaryOperator",
        "PrefixUnaryExpression",
        "PrefixUnaryOperator",
        "PrimaryExpression",
        "PrivateIdentifierPropertyAccessExpression",
        "PrologueDirective",
        "PropertyAccessChain",
        "PropertyAccessChainRoot",
        "PropertyAccessEntityNameExpression",
        "PropertyAccessExpression",
        "RegularExpressionLiteral",
        "RelationalOperator",
        "RelationalOperatorOrHigher",
        "ReturnStatement",
        "ShiftOperator",
        "ShiftOperatorOrHigher",
        "SpreadElement",
        "Statement",
        "StringLiteral",
        "StringLiteralLike",
        "SuperCall",
        "SuperElementAccessExpression",
        "SuperExpression",
        "SuperProperty",
        "SuperPropertyAccessExpression",
        "SwitchStatement",
        "SynthesizedComment",
        "SyntheticExpression",
        "SyntheticReferenceExpression",
        "TaggedTemplateExpression",
        "TemplateExpression",
        "TemplateHead",
        "TemplateLiteral",
        "TemplateLiteralLikeNode",
        "TemplateMiddle",
        "TemplateSpan",
        "TemplateTail",
        "ThisExpression",
        "ThrowStatement",
        "TokenFlags",
        "TryStatement",
        "TypeAliasDeclaration",
        "TypeAssertion",
        "TypeElement",
        "TypeOfExpression",
        "TypeOnlyCompatibleAliasDeclaration",
        "UnaryExpression",
        "UpdateExpression",
        "VariableStatement",
        "VoidExpression",
        "WellKnownSymbolExpression",
        "WhileStatement",
        "WithStatement",
        "YieldExpression"
      ]
    },
    "ts.Node": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind": {
      "enum": [
        0,
        1,
        10,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        11,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        12,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        13,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        14,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        15,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        16,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        17,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        18,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        19,
        190,
        191,
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        2,
        20,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        21,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        22,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        23,
        230,
        231,
        232,
        233,
        234,
        235,
        236,
        237,
        238,
        239,
        24,
        240,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        25,
        250,
        251,
        252,
        253,
        254,
        255,
        256,
        257,
        258,
        259,
        26,
        260,
        261,
        262,
        263,
        264,
        265,
        266,
        267,
        268,
        269,
        27,
        270,
        271,
        272,
        273,
        274,
        275,
        276,
        277,
        278,
        279,
        28,
        280,
        281,
        282,
        283,
        284,
        285,
        286,
        287,
        288,
        289,
        29,
        290,
        291,
        292,
        293,
        294,
        295,
        296,
        297,
        298,
        299,
        3,
        30,
        300,
        301,
        302,
        303,
        304,
        305,
        306,
        307,
        308,
        309,
        31,
        310,
        311,
        312,
        313,
        314,
        315,
        316,
        317,
        318,
        319,
        32,
        320,
        321,
        322,
        323,
        324,
        325,
        326,
        327,
        328,
        329,
        33,
        330,
        34,
        35,
        36,
        37,
        38,
        39,
        4,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        5,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        6,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        7,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        8,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        9,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99
      ],
      "type": "number"
    },
    "ts.NodeFlags": {
      "type": "number",
      "enum": [
        0,
        1,
        1024,
        1048576,
        128,
        131072,
        16,
        16384,
        16777216,
        2,
        2048,
        2097152,
        25358336,
        256,
        262144,
        2816,
        3,
        3145728,
        32,
        32768,
        33554432,
        4,
        4096,
        40960,
        4194304,
        512,
        524288,
        64,
        65536,
        67108864,
        768,
        8,
        8192,
        8388608
      ]
    },
    "ts.ModifierFlags": {
      "type": "number",
      "enum": [
        0,
        1,
        128,
        16,
        2,
        2048,
        2270,
        24,
        256,
        28,
        3071,
        32,
        4,
        512,
        513,
        536870912,
        64,
        8,
        92
      ]
    },
    "TransformFlags": {
      "type": "number"
    },
    "ts.NodeArray": {
      "TODO": "THIS IS AN ARRAY OF NODE PLUS OTHER FIELDS"
    },
    "ts.Decorator": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.Decorator"
        },
        "parent": {
          "$ref": "#/definitions/ts.NamedDeclaration"
        },
        "expression": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.Decorator": {
      "type": "number",
      "enum": [
        157
      ]
    },
    "ts.NamedDeclaration": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/ts.DeclarationName"
        },
        "_declarationBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.DeclarationName": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Identifier"
        },
        {
          "$ref": "#/definitions/ts.StringLiteral"
        },
        {
          "$ref": "#/definitions/ts.NumericLiteral"
        },
        {
          "$ref": "#/definitions/ts.ComputedPropertyName"
        },
        {
          "$ref": "#/definitions/ts.PrivateIdentifier"
        },
        {
          "$ref": "#/definitions/ts.NoSubstitutionTemplateLiteral"
        },
        {
          "$ref": "#/definitions/ts.ElementAccessExpression"
        },
        {
          "$ref": "#/definitions/ts.ObjectBindingPattern"
        },
        {
          "$ref": "#/definitions/ts.ArrayBindingPattern"
        },
        {
          "$ref": "#/definitions/ts.PropertyAccessEntityNameExpression"
        }
      ]
    },
    "ts.Identifier": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.Identifier"
        },
        "escapedText": {
          "$ref": "#/definitions/ts.__String",
          "description": "Prefer to use `id.unescapedText`. (Note: This is available only in services, not internally to the TypeScript compiler.)\nText of identifier, but if the identifier begins with two underscores, this will begin with three."
        },
        "originalKeywordKind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "autoGenerateFlags": {
          "$ref": "#/definitions/ts.GeneratedIdentifierFlags"
        },
        "autoGenerateId": {
          "type": "number"
        },
        "isInJSDocNamespace": {
          "type": "boolean"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "jsdocDotPos": {
          "type": "number"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "escapedText",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.Identifier": {
      "type": "number",
      "enum": [
        75
      ]
    },
    "ts.__String": {
      "description": "This represents a string whose leading underscore have been escaped by adding extra leading underscores.\nThe shape of this brand is rather unique compared to others we've used.\nInstead of just an intersection of a string and an object, it is that union-ed\nwith an intersection of void and an object. This makes it wholly incompatible\nwith a normal string (which is good, it cannot be misused on assignment or on usage),\nwhile still being comparable with a normal string via === (also good) and castable from a string.",
      "type": "string"
    },
    "ts.GeneratedIdentifierFlags": {
      "type": "number",
      "enum": [
        0,
        1,
        16,
        2,
        3,
        32,
        4,
        7,
        8
      ]
    },
    "ts.TypeNode": {
      "type": "object",
      "properties": {
        "_typeNodeBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.ModifiersArray": {
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "#/definitions/ts.Token<ts.SyntaxKind.AbstractKeyword>"
          },
          {
            "$ref": "#/definitions/ts.Token<ts.SyntaxKind.AsyncKeyword>"
          },
          {
            "$ref": "#/definitions/ts.Token<ts.SyntaxKind.ConstKeyword>"
          },
          {
            "$ref": "#/definitions/ts.Token<ts.SyntaxKind.DeclareKeyword>"
          },
          {
            "$ref": "#/definitions/ts.Token<ts.SyntaxKind.DefaultKeyword>"
          },
          {
            "$ref": "#/definitions/ts.Token<ts.SyntaxKind.ExportKeyword>"
          },
          {
            "$ref": "#/definitions/ts.Token<ts.SyntaxKind.PublicKeyword>"
          },
          {
            "$ref": "#/definitions/ts.Token<ts.SyntaxKind.PrivateKeyword>"
          },
          {
            "$ref": "#/definitions/ts.Token<ts.SyntaxKind.ProtectedKeyword>"
          },
          {
            "$ref": "#/definitions/ts.Token<ts.SyntaxKind.ReadonlyKeyword>"
          },
          {
            "$ref": "#/definitions/ts.Token<ts.SyntaxKind.StaticKeyword>"
          }
        ]
      }
    },
    "ts.Token<ts.SyntaxKind.AbstractKeyword>": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.AbstractKeyword"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.AbstractKeyword": {
      "type": "number",
      "enum": [
        122
      ]
    },
    "ts.Token<ts.SyntaxKind.AsyncKeyword>": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.AsyncKeyword"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.AsyncKeyword": {
      "type": "number",
      "enum": [
        126
      ]
    },
    "ts.Token<ts.SyntaxKind.ConstKeyword>": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ConstKeyword"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ConstKeyword": {
      "type": "number",
      "enum": [
        81
      ]
    },
    "ts.Token<ts.SyntaxKind.DeclareKeyword>": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.DeclareKeyword"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.DeclareKeyword": {
      "type": "number",
      "enum": [
        130
      ]
    },
    "ts.Token<ts.SyntaxKind.DefaultKeyword>": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.DefaultKeyword"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.DefaultKeyword": {
      "type": "number",
      "enum": [
        84
      ]
    },
    "ts.Token<ts.SyntaxKind.ExportKeyword>": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ExportKeyword"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ExportKeyword": {
      "type": "number",
      "enum": [
        89
      ]
    },
    "ts.Token<ts.SyntaxKind.PublicKeyword>": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PublicKeyword"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.PublicKeyword": {
      "type": "number",
      "enum": [
        119
      ]
    },
    "ts.Token<ts.SyntaxKind.PrivateKeyword>": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PrivateKeyword"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.PrivateKeyword": {
      "type": "number",
      "enum": [
        117
      ]
    },
    "ts.Token<ts.SyntaxKind.ProtectedKeyword>": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ProtectedKeyword"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ProtectedKeyword": {
      "type": "number",
      "enum": [
        118
      ]
    },
    "ts.Token<ts.SyntaxKind.ReadonlyKeyword>": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ReadonlyKeyword"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ReadonlyKeyword": {
      "type": "number",
      "enum": [
        138
      ]
    },
    "ts.Token<ts.SyntaxKind.StaticKeyword>": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.StaticKeyword"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.StaticKeyword": {
      "type": "number",
      "enum": [
        120
      ]
    },
    "ts.TypeParameterDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.TypeParameter"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.CallSignatureDeclaration"
            },
            {
              "$ref": "#/definitions/ts.ConstructSignatureDeclaration"
            },
            {
              "$ref": "#/definitions/ts.MethodSignature"
            },
            {
              "$ref": "#/definitions/ts.ArrowFunction"
            },
            {
              "$ref": "#/definitions/ts.FunctionExpression"
            },
            {
              "$ref": "#/definitions/ts.FunctionDeclaration"
            },
            {
              "$ref": "#/definitions/ts.ConstructorDeclaration"
            },
            {
              "$ref": "#/definitions/ts.MethodDeclaration"
            },
            {
              "$ref": "#/definitions/ts.GetAccessorDeclaration"
            },
            {
              "$ref": "#/definitions/ts.SetAccessorDeclaration"
            },
            {
              "$ref": "#/definitions/ts.ClassDeclaration"
            },
            {
              "$ref": "#/definitions/ts.ClassExpression"
            },
            {
              "$ref": "#/definitions/ts.InterfaceDeclaration"
            },
            {
              "$ref": "#/definitions/ts.TypeAliasDeclaration"
            },
            {
              "$ref": "#/definitions/ts.IndexSignatureDeclaration"
            },
            {
              "$ref": "#/definitions/ts.FunctionTypeNode"
            },
            {
              "$ref": "#/definitions/ts.ConstructorTypeNode"
            },
            {
              "$ref": "#/definitions/ts.JSDocFunctionType"
            },
            {
              "$ref": "#/definitions/ts.InferTypeNode"
            },
            {
              "$ref": "#/definitions/ts.JSDocTemplateTag"
            }
          ]
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "constraint": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "default": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.TypeParameter": {
      "type": "number",
      "enum": [
        155
      ]
    },
    "ts.CallSignatureDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.CallSignature"
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        },
        "_typeElementBrand": {},
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        }
      },
      "required": [
        "_declarationBrand",
        "_typeElementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parameters",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.CallSignature": {
      "type": "number",
      "enum": [
        165
      ]
    },
    "ts.PropertyName": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Identifier"
        },
        {
          "$ref": "#/definitions/ts.StringLiteral"
        },
        {
          "$ref": "#/definitions/ts.NumericLiteral"
        },
        {
          "$ref": "#/definitions/ts.ComputedPropertyName"
        },
        {
          "$ref": "#/definitions/ts.PrivateIdentifier"
        }
      ]
    },
    "ts.StringLiteral": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.StringLiteral"
        },
        "textSourceNode": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "$ref": "#/definitions/ts.StringLiteral"
            },
            {
              "$ref": "#/definitions/ts.NumericLiteral"
            },
            {
              "$ref": "#/definitions/ts.NoSubstitutionTemplateLiteral"
            }
          ]
        },
        "singleQuote": {
          "description": "Note: this is only set when synthesizing a node, not during parsing.",
          "type": "boolean"
        },
        "_literalExpressionBrand": {},
        "text": {
          "type": "string"
        },
        "isUnterminated": {
          "type": "boolean"
        },
        "hasExtendedUnicodeEscape": {
          "type": "boolean"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_literalExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "text",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.StringLiteral": {
      "type": "number",
      "enum": [
        10
      ]
    },
    "ts.NumericLiteral": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.NumericLiteral"
        },
        "numericLiteralFlags": {
          "$ref": "#/definitions/ts.TokenFlags"
        },
        "_literalExpressionBrand": {},
        "text": {
          "type": "string"
        },
        "isUnterminated": {
          "type": "boolean"
        },
        "hasExtendedUnicodeEscape": {
          "type": "boolean"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_literalExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "numericLiteralFlags",
        "parent",
        "pos",
        "text",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.NumericLiteral": {
      "type": "number",
      "enum": [
        8
      ]
    },
    "ts.TokenFlags": {
      "type": "number",
      "enum": [
        0,
        1,
        1008,
        1024,
        128,
        16,
        2,
        2048,
        256,
        32,
        384,
        4,
        512,
        64,
        8
      ]
    },
    "ts.NoSubstitutionTemplateLiteral": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.NoSubstitutionTemplateLiteral"
        },
        "templateFlags": {
          "$ref": "#/definitions/ts.TokenFlags"
        },
        "_literalExpressionBrand": {},
        "text": {
          "type": "string"
        },
        "isUnterminated": {
          "type": "boolean"
        },
        "hasExtendedUnicodeEscape": {
          "type": "boolean"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "rawText": {
          "type": "string"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_literalExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "text",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.NoSubstitutionTemplateLiteral": {
      "type": "number",
      "enum": [
        14
      ]
    },
    "ts.ComputedPropertyName": {
      "type": "object",
      "properties": {
        "parent": {
          "$ref": "#/definitions/ts.Declaration"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ComputedPropertyName"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.Declaration": {
      "type": "object",
      "properties": {
        "_declarationBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ComputedPropertyName": {
      "type": "number",
      "enum": [
        154
      ]
    },
    "ts.Expression": {
      "type": "object",
      "properties": {
        "_expressionBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.PrivateIdentifier": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PrivateIdentifier"
        },
        "escapedText": {
          "$ref": "#/definitions/ts.__String"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "escapedText",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.PrivateIdentifier": {
      "type": "number",
      "enum": [
        76
      ]
    },
    "ts.ParameterDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.Parameter"
        },
        "parent": {
          "$ref": "#/definitions/ts.SignatureDeclaration"
        },
        "dotDotDotToken": {
          "$ref": "#/definitions/ts.DotDotDotToken"
        },
        "name": {
          "$ref": "#/definitions/ts.BindingName"
        },
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "initializer": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.Parameter": {
      "type": "number",
      "enum": [
        156
      ]
    },
    "ts.SignatureDeclaration": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.CallSignatureDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ConstructSignatureDeclaration"
        },
        {
          "$ref": "#/definitions/ts.MethodSignature"
        },
        {
          "$ref": "#/definitions/ts.ArrowFunction"
        },
        {
          "$ref": "#/definitions/ts.FunctionExpression"
        },
        {
          "$ref": "#/definitions/ts.FunctionDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ConstructorDeclaration"
        },
        {
          "$ref": "#/definitions/ts.MethodDeclaration"
        },
        {
          "$ref": "#/definitions/ts.GetAccessorDeclaration"
        },
        {
          "$ref": "#/definitions/ts.SetAccessorDeclaration"
        },
        {
          "$ref": "#/definitions/ts.IndexSignatureDeclaration"
        },
        {
          "$ref": "#/definitions/ts.FunctionTypeNode"
        },
        {
          "$ref": "#/definitions/ts.ConstructorTypeNode"
        },
        {
          "$ref": "#/definitions/ts.JSDocFunctionType"
        }
      ]
    },
    "ts.ConstructSignatureDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ConstructSignature"
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        },
        "_typeElementBrand": {},
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        }
      },
      "required": [
        "_declarationBrand",
        "_typeElementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parameters",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ConstructSignature": {
      "type": "number",
      "enum": [
        166
      ]
    },
    "ts.JSDoc": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocComment"
        },
        "parent": {
          "$ref": "#/definitions/ts.HasJSDoc"
        },
        "tags": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocComment": {
      "type": "number",
      "enum": [
        303
      ]
    },
    "ts.HasJSDoc": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.ParameterDeclaration"
        },
        {
          "$ref": "#/definitions/ts.CallSignatureDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ConstructSignatureDeclaration"
        },
        {
          "$ref": "#/definitions/ts.MethodSignature"
        },
        {
          "$ref": "#/definitions/ts.PropertySignature"
        },
        {
          "$ref": "#/definitions/ts.ArrowFunction"
        },
        {
          "$ref": "#/definitions/ts.ParenthesizedExpression"
        },
        {
          "$ref": "#/definitions/ts.SpreadAssignment"
        },
        {
          "$ref": "#/definitions/ts.ShorthandPropertyAssignment"
        },
        {
          "$ref": "#/definitions/ts.PropertyAssignment"
        },
        {
          "$ref": "#/definitions/ts.FunctionExpression"
        },
        {
          "$ref": "#/definitions/ts.LabeledStatement"
        },
        {
          "$ref": "#/definitions/ts.ExpressionStatement"
        },
        {
          "$ref": "#/definitions/ts.VariableStatement"
        },
        {
          "$ref": "#/definitions/ts.FunctionDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ConstructorDeclaration"
        },
        {
          "$ref": "#/definitions/ts.MethodDeclaration"
        },
        {
          "$ref": "#/definitions/ts.PropertyDeclaration"
        },
        {
          "$ref": "#/definitions/ts.GetAccessorDeclaration"
        },
        {
          "$ref": "#/definitions/ts.SetAccessorDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ClassDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ClassExpression"
        },
        {
          "$ref": "#/definitions/ts.InterfaceDeclaration"
        },
        {
          "$ref": "#/definitions/ts.TypeAliasDeclaration"
        },
        {
          "$ref": "#/definitions/ts.EnumMember"
        },
        {
          "$ref": "#/definitions/ts.EnumDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ModuleDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ImportEqualsDeclaration"
        },
        {
          "$ref": "#/definitions/ts.IndexSignatureDeclaration"
        },
        {
          "$ref": "#/definitions/ts.FunctionTypeNode"
        },
        {
          "$ref": "#/definitions/ts.ConstructorTypeNode"
        },
        {
          "$ref": "#/definitions/ts.JSDocFunctionType"
        },
        {
          "$ref": "#/definitions/ts.ExportDeclaration"
        },
        {
          "allOf": [
            {
              "$ref": "#/definitions/ts.Token<ts.SyntaxKind.EndOfFileToken>"
            },
            {
              "$ref": "#/definitions/ts.JSDocContainer"
            }
          ]
        }
      ]
    },
    "ts.MethodSignature": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.MethodSignature"
        },
        "parent": {
          "$ref": "#/definitions/ts.ObjectTypeDeclaration"
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        },
        "_typeElementBrand": {},
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        }
      },
      "required": [
        "_declarationBrand",
        "_typeElementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parameters",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.MethodSignature": {
      "type": "number",
      "enum": [
        160
      ]
    },
    "ts.ObjectTypeDeclaration": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.ClassDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ClassExpression"
        },
        {
          "$ref": "#/definitions/ts.InterfaceDeclaration"
        },
        {
          "$ref": "#/definitions/ts.TypeLiteralNode"
        }
      ]
    },
    "ts.ClassDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ClassDeclaration"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "heritageClauses": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "members": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        },
        "_statementBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "members",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ClassDeclaration": {
      "type": "number",
      "enum": [
        245
      ]
    },
    "ts.HeritageClause": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.HeritageClause"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.ClassDeclaration"
            },
            {
              "$ref": "#/definitions/ts.ClassExpression"
            },
            {
              "$ref": "#/definitions/ts.InterfaceDeclaration"
            }
          ]
        },
        "token": {
          "enum": [
            113,
            90
          ],
          "type": "number"
        },
        "types": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "token",
        "transformFlags",
        "types"
      ]
    },
    "ts.SyntaxKind.HeritageClause": {
      "type": "number",
      "enum": [
        279
      ]
    },
    "ts.ClassExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ClassExpression"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "heritageClauses": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "members": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "members",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ClassExpression": {
      "type": "number",
      "enum": [
        214
      ]
    },
    "ts.ClassElement": {
      "type": "object",
      "properties": {
        "_classElementBrand": {},
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "_declarationBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_classElementBrand",
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.JSDocTag": {
      "type": "object",
      "properties": {
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JSDoc"
            },
            {
              "$ref": "#/definitions/ts.JSDocTypeLiteral"
            }
          ]
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.JSDocTypeLiteral": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocTypeLiteral"
        },
        "jsDocPropertyTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocPropertyLikeTag"
          }
        },
        "isArrayType": {
          "description": "If true, then this type literal represents an *array* of its type.",
          "type": "boolean"
        },
        "_jsDocTypeBrand": {},
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_jsDocTypeBrand",
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocTypeLiteral": {
      "type": "number",
      "enum": [
        304
      ]
    },
    "ts.JSDocPropertyLikeTag": {
      "type": "object",
      "properties": {
        "parent": {
          "$ref": "#/definitions/ts.JSDoc"
        },
        "name": {
          "$ref": "#/definitions/ts.EntityName"
        },
        "typeExpression": {
          "$ref": "#/definitions/ts.JSDocTypeExpression"
        },
        "isNameFirst": {
          "description": "Whether the property name came before the type -- non-standard for JSDoc, but Typescript-like",
          "type": "boolean"
        },
        "isBracketed": {
          "type": "boolean"
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "isBracketed",
        "isNameFirst",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.EntityName": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Identifier"
        },
        {
          "$ref": "#/definitions/ts.QualifiedName"
        }
      ]
    },
    "ts.QualifiedName": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.QualifiedName"
        },
        "left": {
          "$ref": "#/definitions/ts.EntityName"
        },
        "right": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "jsdocDotPos": {
          "type": "number"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "left",
        "modifierFlagsCache",
        "parent",
        "pos",
        "right",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.QualifiedName": {
      "type": "number",
      "enum": [
        153
      ]
    },
    "ts.JSDocTypeExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocTypeExpression"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags",
        "type"
      ]
    },
    "ts.SyntaxKind.JSDocTypeExpression": {
      "type": "number",
      "enum": [
        294
      ]
    },
    "ts.InterfaceDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.InterfaceDeclaration"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "heritageClauses": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "members": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_statementBrand": {},
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "members",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.InterfaceDeclaration": {
      "type": "number",
      "enum": [
        246
      ]
    },
    "ts.TypeElement": {
      "type": "object",
      "properties": {
        "_typeElementBrand": {},
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        },
        "_declarationBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_declarationBrand",
        "_typeElementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.QuestionToken": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.QuestionToken"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.QuestionToken": {
      "type": "number",
      "enum": [
        57
      ]
    },
    "ts.ExpressionWithTypeArguments": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ExpressionWithTypeArguments"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.HeritageClause"
            },
            {
              "$ref": "#/definitions/ts.JSDocAugmentsTag"
            }
          ]
        },
        "expression": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_typeNodeBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ExpressionWithTypeArguments": {
      "type": "number",
      "enum": [
        216
      ]
    },
    "ts.JSDocAugmentsTag": {
      "description": "Note that `@extends` is a synonym of `@augments`.\nBoth tags are represented by this interface.",
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocAugmentsTag"
        },
        "class": {
          "allOf": [
            {
              "$ref": "#/definitions/ts.ExpressionWithTypeArguments"
            },
            {
              "type": "object",
              "properties": {
                "expression": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ts.Identifier"
                    },
                    {
                      "$ref": "#/definitions/ts.PropertyAccessEntityNameExpression"
                    }
                  ]
                }
              },
              "required": [
                "expression"
              ]
            }
          ]
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JSDoc"
            },
            {
              "$ref": "#/definitions/ts.JSDocTypeLiteral"
            }
          ]
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "class",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocAugmentsTag": {
      "type": "number",
      "enum": [
        307
      ]
    },
    "ts.PropertyAccessEntityNameExpression": {
      "description": "Brand for a PropertyAccessExpression which, like a QualifiedName, consists of a sequence of identifiers separated by dots.",
      "type": "object",
      "properties": {
        "_propertyAccessExpressionLikeQualifiedNameBrand": {},
        "expression": {
          "$ref": "#/definitions/ts.EntityNameExpression"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PropertyAccessExpression"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.EntityNameExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Identifier"
        },
        {
          "$ref": "#/definitions/ts.PropertyAccessEntityNameExpression"
        }
      ]
    },
    "ts.SyntaxKind.PropertyAccessExpression": {
      "type": "number",
      "enum": [
        194
      ]
    },
    "ts.QuestionDotToken": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.QuestionDotToken"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.QuestionDotToken": {
      "type": "number",
      "enum": [
        28
      ]
    },
    "ts.LeftHandSideExpression": {
      "type": "object",
      "properties": {
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.TypeLiteralNode": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.TypeLiteral"
        },
        "members": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "members",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.TypeLiteral": {
      "type": "number",
      "enum": [
        173
      ]
    },
    "ts.PropertySignature": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PropertySignature"
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "initializer": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_typeElementBrand": {},
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_typeElementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.PropertySignature": {
      "type": "number",
      "enum": [
        158
      ]
    },
    "ts.ArrowFunction": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ArrowFunction"
        },
        "equalsGreaterThanToken": {
          "$ref": "#/definitions/ts.Token"
        },
        "body": {
          "$ref": "#/definitions/ts.ConciseBody"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_functionLikeDeclarationBrand": {},
        "asteriskToken": {
          "$ref": "#/definitions/ts.AsteriskToken"
        },
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        },
        "exclamationToken": {
          "$ref": "#/definitions/ts.ExclamationToken"
        },
        "endFlowNode": {
          "$ref": "#/definitions/FlowNode"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_functionLikeDeclarationBrand",
        "body",
        "end",
        "equalsGreaterThanToken",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parameters",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ArrowFunction": {
      "type": "number",
      "enum": [
        202
      ]
    },
    "ts.Token": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.EqualsGreaterThanToken"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.EqualsGreaterThanToken": {
      "type": "number",
      "enum": [
        38
      ]
    },
    "ts.ConciseBody": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Expression"
        },
        {
          "$ref": "#/definitions/ts.Block"
        }
      ]
    },
    "ts.Block": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.Block"
        },
        "statements": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "multiLine": {
          "type": "boolean"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "statements",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.Block": {
      "type": "number",
      "enum": [
        223
      ]
    },
    "ts.Statement": {
      "type": "object",
      "properties": {
        "_statementBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.AsteriskToken": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.AsteriskToken"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.AsteriskToken": {
      "type": "number",
      "enum": [
        41
      ]
    },
    "ts.ExclamationToken": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ExclamationToken"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ExclamationToken": {
      "type": "number",
      "enum": [
        53
      ]
    },
    "FlowNode": {
      "type": "object",
      "properties": {}
    },
    "ts.ParenthesizedExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ParenthesizedExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ParenthesizedExpression": {
      "type": "number",
      "enum": [
        200
      ]
    },
    "ts.SpreadAssignment": {
      "type": "object",
      "properties": {
        "parent": {
          "$ref": "#/definitions/ts.ObjectLiteralExpression"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.SpreadAssignment"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_objectLiteralBrand": {},
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_objectLiteralBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.ObjectLiteralExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ObjectLiteralExpression"
        },
        "multiLine": {
          "type": "boolean"
        },
        "properties": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "properties",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ObjectLiteralExpression": {
      "type": "number",
      "enum": [
        193
      ]
    },
    "ts.ShorthandPropertyAssignment": {
      "type": "object",
      "properties": {
        "parent": {
          "$ref": "#/definitions/ts.ObjectLiteralExpression"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ShorthandPropertyAssignment"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        },
        "exclamationToken": {
          "$ref": "#/definitions/ts.ExclamationToken"
        },
        "equalsToken": {
          "$ref": "#/definitions/ts.Token<ts.SyntaxKind.EqualsToken>"
        },
        "objectAssignmentInitializer": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_objectLiteralBrand": {},
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_objectLiteralBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ShorthandPropertyAssignment": {
      "type": "number",
      "enum": [
        282
      ]
    },
    "ts.Token<ts.SyntaxKind.EqualsToken>": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.EqualsToken"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.EqualsToken": {
      "type": "number",
      "enum": [
        62
      ]
    },
    "ts.PropertyAssignment": {
      "type": "object",
      "properties": {
        "parent": {
          "$ref": "#/definitions/ts.ObjectLiteralExpression"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PropertyAssignment"
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        },
        "initializer": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_objectLiteralBrand": {},
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_objectLiteralBrand",
        "end",
        "flags",
        "initializer",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.PropertyAssignment": {
      "type": "number",
      "enum": [
        281
      ]
    },
    "ts.MethodDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.MethodDeclaration"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.ClassDeclaration"
            },
            {
              "$ref": "#/definitions/ts.ClassExpression"
            },
            {
              "$ref": "#/definitions/ts.ObjectLiteralExpression"
            }
          ]
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "body": {
          "$ref": "#/definitions/ts.Block"
        },
        "_functionLikeDeclarationBrand": {},
        "asteriskToken": {
          "$ref": "#/definitions/ts.AsteriskToken"
        },
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        },
        "exclamationToken": {
          "$ref": "#/definitions/ts.ExclamationToken"
        },
        "endFlowNode": {
          "$ref": "#/definitions/FlowNode"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        },
        "_classElementBrand": {},
        "_objectLiteralBrand": {}
      },
      "required": [
        "_classElementBrand",
        "_declarationBrand",
        "_functionLikeDeclarationBrand",
        "_objectLiteralBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parameters",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.MethodDeclaration": {
      "type": "number",
      "enum": [
        161
      ]
    },
    "ts.GetAccessorDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.GetAccessor"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.ClassDeclaration"
            },
            {
              "$ref": "#/definitions/ts.ClassExpression"
            },
            {
              "$ref": "#/definitions/ts.ObjectLiteralExpression"
            }
          ]
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "body": {
          "$ref": "#/definitions/ts.Block"
        },
        "_functionLikeDeclarationBrand": {},
        "asteriskToken": {
          "$ref": "#/definitions/ts.AsteriskToken"
        },
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        },
        "exclamationToken": {
          "$ref": "#/definitions/ts.ExclamationToken"
        },
        "endFlowNode": {
          "$ref": "#/definitions/FlowNode"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        },
        "_classElementBrand": {},
        "_objectLiteralBrand": {}
      },
      "required": [
        "_classElementBrand",
        "_declarationBrand",
        "_functionLikeDeclarationBrand",
        "_objectLiteralBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parameters",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.GetAccessor": {
      "type": "number",
      "enum": [
        163
      ]
    },
    "ts.SetAccessorDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.SetAccessor"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.ClassDeclaration"
            },
            {
              "$ref": "#/definitions/ts.ClassExpression"
            },
            {
              "$ref": "#/definitions/ts.ObjectLiteralExpression"
            }
          ]
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "body": {
          "$ref": "#/definitions/ts.Block"
        },
        "_functionLikeDeclarationBrand": {},
        "asteriskToken": {
          "$ref": "#/definitions/ts.AsteriskToken"
        },
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        },
        "exclamationToken": {
          "$ref": "#/definitions/ts.ExclamationToken"
        },
        "endFlowNode": {
          "$ref": "#/definitions/FlowNode"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        },
        "_classElementBrand": {},
        "_objectLiteralBrand": {}
      },
      "required": [
        "_classElementBrand",
        "_declarationBrand",
        "_functionLikeDeclarationBrand",
        "_objectLiteralBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parameters",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.SetAccessor": {
      "type": "number",
      "enum": [
        164
      ]
    },
    "ts.SyntaxKind.SpreadAssignment": {
      "type": "number",
      "enum": [
        283
      ]
    },
    "ts.FunctionExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.FunctionExpression"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "body": {
          "$ref": "#/definitions/ts.Block"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_functionLikeDeclarationBrand": {},
        "asteriskToken": {
          "$ref": "#/definitions/ts.AsteriskToken"
        },
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        },
        "exclamationToken": {
          "$ref": "#/definitions/ts.ExclamationToken"
        },
        "endFlowNode": {
          "$ref": "#/definitions/FlowNode"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_functionLikeDeclarationBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "body",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parameters",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.FunctionExpression": {
      "type": "number",
      "enum": [
        201
      ]
    },
    "ts.LabeledStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.LabeledStatement"
        },
        "label": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "statement": {
          "$ref": "#/definitions/ts.Statement"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "label",
        "modifierFlagsCache",
        "parent",
        "pos",
        "statement",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.LabeledStatement": {
      "type": "number",
      "enum": [
        238
      ]
    },
    "ts.ExpressionStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ExpressionStatement"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ExpressionStatement": {
      "type": "number",
      "enum": [
        226
      ]
    },
    "ts.VariableStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.VariableStatement"
        },
        "declarationList": {
          "$ref": "#/definitions/ts.VariableDeclarationList"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_statementBrand",
        "declarationList",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.VariableStatement": {
      "type": "number",
      "enum": [
        225
      ]
    },
    "ts.VariableDeclarationList": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.VariableDeclarationList"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.VariableStatement"
            },
            {
              "$ref": "#/definitions/ts.ForStatement"
            },
            {
              "$ref": "#/definitions/ts.ForInStatement"
            },
            {
              "$ref": "#/definitions/ts.ForOfStatement"
            }
          ]
        },
        "declarations": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "declarations",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.VariableDeclarationList": {
      "type": "number",
      "enum": [
        243
      ]
    },
    "ts.ForStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ForStatement"
        },
        "initializer": {
          "$ref": "#/definitions/ts.ForInitializer"
        },
        "condition": {
          "$ref": "#/definitions/ts.Expression"
        },
        "incrementor": {
          "$ref": "#/definitions/ts.Expression"
        },
        "statement": {
          "$ref": "#/definitions/ts.Statement"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "statement",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ForStatement": {
      "type": "number",
      "enum": [
        230
      ]
    },
    "ts.ForInitializer": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Expression"
        },
        {
          "$ref": "#/definitions/ts.VariableDeclarationList"
        }
      ]
    },
    "ts.ForInStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ForInStatement"
        },
        "initializer": {
          "$ref": "#/definitions/ts.ForInitializer"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "statement": {
          "$ref": "#/definitions/ts.Statement"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "expression",
        "flags",
        "initializer",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "statement",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ForInStatement": {
      "type": "number",
      "enum": [
        231
      ]
    },
    "ts.ForOfStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ForOfStatement"
        },
        "awaitModifier": {
          "$ref": "#/definitions/ts.AwaitKeywordToken"
        },
        "initializer": {
          "$ref": "#/definitions/ts.ForInitializer"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "statement": {
          "$ref": "#/definitions/ts.Statement"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "expression",
        "flags",
        "initializer",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "statement",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ForOfStatement": {
      "type": "number",
      "enum": [
        232
      ]
    },
    "ts.AwaitKeywordToken": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.AwaitKeyword"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.AwaitKeyword": {
      "type": "number",
      "enum": [
        127
      ]
    },
    "ts.VariableDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.VariableDeclaration"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.VariableDeclarationList"
            },
            {
              "$ref": "#/definitions/ts.CatchClause"
            }
          ]
        },
        "name": {
          "$ref": "#/definitions/ts.BindingName"
        },
        "exclamationToken": {
          "$ref": "#/definitions/ts.ExclamationToken"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "initializer": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.VariableDeclaration": {
      "type": "number",
      "enum": [
        242
      ]
    },
    "ts.CatchClause": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.CatchClause"
        },
        "parent": {
          "$ref": "#/definitions/ts.TryStatement"
        },
        "variableDeclaration": {
          "$ref": "#/definitions/ts.VariableDeclaration"
        },
        "block": {
          "$ref": "#/definitions/ts.Block"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "block",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.CatchClause": {
      "type": "number",
      "enum": [
        280
      ]
    },
    "ts.TryStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.TryStatement"
        },
        "tryBlock": {
          "$ref": "#/definitions/ts.Block"
        },
        "catchClause": {
          "$ref": "#/definitions/ts.CatchClause"
        },
        "finallyBlock": {
          "$ref": "#/definitions/ts.Block"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags",
        "tryBlock"
      ]
    },
    "ts.SyntaxKind.TryStatement": {
      "type": "number",
      "enum": [
        240
      ]
    },
    "ts.BindingName": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Identifier"
        },
        {
          "$ref": "#/definitions/ts.ObjectBindingPattern"
        },
        {
          "$ref": "#/definitions/ts.ArrayBindingPattern"
        }
      ]
    },
    "ts.ObjectBindingPattern": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ObjectBindingPattern"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.ParameterDeclaration"
            },
            {
              "$ref": "#/definitions/ts.VariableDeclaration"
            },
            {
              "$ref": "#/definitions/ts.BindingElement"
            }
          ]
        },
        "elements": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "elements",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ObjectBindingPattern": {
      "type": "number",
      "enum": [
        189
      ]
    },
    "ts.BindingElement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.BindingElement"
        },
        "parent": {
          "$ref": "#/definitions/ts.BindingPattern"
        },
        "propertyName": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "dotDotDotToken": {
          "$ref": "#/definitions/ts.DotDotDotToken"
        },
        "name": {
          "$ref": "#/definitions/ts.BindingName"
        },
        "initializer": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.BindingElement": {
      "type": "number",
      "enum": [
        191
      ]
    },
    "ts.BindingPattern": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.ObjectBindingPattern"
        },
        {
          "$ref": "#/definitions/ts.ArrayBindingPattern"
        }
      ]
    },
    "ts.ArrayBindingPattern": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ArrayBindingPattern"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.ParameterDeclaration"
            },
            {
              "$ref": "#/definitions/ts.VariableDeclaration"
            },
            {
              "$ref": "#/definitions/ts.BindingElement"
            }
          ]
        },
        "elements": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "elements",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ArrayBindingPattern": {
      "type": "number",
      "enum": [
        190
      ]
    },
    "ts.OmittedExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.OmittedExpression"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.OmittedExpression": {
      "type": "number",
      "enum": [
        215
      ]
    },
    "ts.DotDotDotToken": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.DotDotDotToken"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.DotDotDotToken": {
      "type": "number",
      "enum": [
        25
      ]
    },
    "ts.FunctionDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.FunctionDeclaration"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "body": {
          "$ref": "#/definitions/ts.Block"
        },
        "_functionLikeDeclarationBrand": {},
        "asteriskToken": {
          "$ref": "#/definitions/ts.AsteriskToken"
        },
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        },
        "exclamationToken": {
          "$ref": "#/definitions/ts.ExclamationToken"
        },
        "endFlowNode": {
          "$ref": "#/definitions/FlowNode"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        },
        "_statementBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_functionLikeDeclarationBrand",
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parameters",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.FunctionDeclaration": {
      "type": "number",
      "enum": [
        244
      ]
    },
    "ts.ConstructorDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.Constructor"
        },
        "parent": {
          "$ref": "#/definitions/ts.ClassLikeDeclaration"
        },
        "body": {
          "$ref": "#/definitions/ts.Block"
        },
        "returnFlowNode": {
          "$ref": "#/definitions/FlowNode"
        },
        "_functionLikeDeclarationBrand": {},
        "asteriskToken": {
          "$ref": "#/definitions/ts.AsteriskToken"
        },
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        },
        "exclamationToken": {
          "$ref": "#/definitions/ts.ExclamationToken"
        },
        "endFlowNode": {
          "$ref": "#/definitions/FlowNode"
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        },
        "_classElementBrand": {}
      },
      "required": [
        "_classElementBrand",
        "_declarationBrand",
        "_functionLikeDeclarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parameters",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.Constructor": {
      "type": "number",
      "enum": [
        162
      ]
    },
    "ts.ClassLikeDeclaration": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.ClassDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ClassExpression"
        }
      ]
    },
    "ts.PropertyDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PropertyDeclaration"
        },
        "parent": {
          "$ref": "#/definitions/ts.ClassLikeDeclaration"
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        },
        "exclamationToken": {
          "$ref": "#/definitions/ts.ExclamationToken"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "initializer": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_classElementBrand": {},
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_classElementBrand",
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.PropertyDeclaration": {
      "type": "number",
      "enum": [
        159
      ]
    },
    "ts.TypeAliasDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.TypeAliasDeclaration"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_statementBrand": {},
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags",
        "type"
      ]
    },
    "ts.SyntaxKind.TypeAliasDeclaration": {
      "type": "number",
      "enum": [
        247
      ]
    },
    "ts.EnumMember": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.EnumMember"
        },
        "parent": {
          "$ref": "#/definitions/ts.EnumDeclaration"
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "initializer": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.EnumMember": {
      "type": "number",
      "enum": [
        284
      ]
    },
    "ts.EnumDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.EnumDeclaration"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "members": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_statementBrand": {},
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "members",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.EnumDeclaration": {
      "type": "number",
      "enum": [
        248
      ]
    },
    "ts.ModuleDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ModuleDeclaration"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "$ref": "#/definitions/ts.SourceFile"
            },
            {
              "$ref": "#/definitions/ts.ModuleBlock"
            },
            {
              "$ref": "#/definitions/ts.NamespaceDeclaration"
            },
            {
              "$ref": "#/definitions/ts.JSDocNamespaceDeclaration"
            }
          ]
        },
        "name": {
          "$ref": "#/definitions/ts.ModuleName"
        },
        "body": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "$ref": "#/definitions/ts.ModuleBlock"
            },
            {
              "$ref": "#/definitions/ts.NamespaceDeclaration"
            },
            {
              "$ref": "#/definitions/ts.JSDocNamespaceDeclaration"
            }
          ]
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_statementBrand": {},
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ModuleDeclaration": {
      "type": "number",
      "enum": [
        249
      ]
    },
    "ts.SourceFile": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.SourceFile"
        },
        "statements": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "endOfFileToken": {
          "$ref": "#/definitions/ts.Token_2"
        },
        "fileName": {
          "type": "string"
        },
        "path": {
          "$ref": "#/definitions/ts.Path"
        },
        "text": {
          "type": "string"
        },
        "resolvedPath": {
          "$ref": "#/definitions/ts.Path",
          "description": "Resolved path can be different from path property,\nwhen file is included through project reference is mapped to its output instead of source\nin that case resolvedPath = path to output file\npath = input file's path"
        },
        "originalFileName": {
          "description": "Original file name that can be different from fileName,\nwhen file is included through project reference is mapped to its output instead of source\nin that case originalFileName = name of input file\nfileName = output file's name",
          "type": "string"
        },
        "redirectInfo": {
          "$ref": "#/definitions/ts.RedirectInfo"
        },
        "amdDependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.AmdDependency"
          }
        },
        "moduleName": {
          "type": "string"
        },
        "referencedFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.FileReference"
          }
        },
        "typeReferenceDirectives": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.FileReference"
          }
        },
        "libReferenceDirectives": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.FileReference"
          }
        },
        "languageVariant": {
          "$ref": "#/definitions/ts.LanguageVariant"
        },
        "isDeclarationFile": {
          "type": "boolean"
        },
        "renamedDependencies": {
          "description": "ES6 Map interface, only read methods included.",
          "$ref": "#/definitions/ts.ReadonlyMap<string>"
        },
        "hasNoDefaultLib": {
          "description": "lib.d.ts should have a reference comment like\n\n  /// <reference no-default-lib=\"true\"/>\n\nIf any other file has this comment, it signals not to include lib.d.ts\nbecause this containing file is intended to act as a default library.",
          "type": "boolean"
        },
        "languageVersion": {
          "$ref": "#/definitions/ts.ScriptTarget"
        },
        "scriptKind": {
          "$ref": "#/definitions/ts.ScriptKind"
        },
        "externalModuleIndicator": {
          "$ref": "#/definitions/ts.Node"
        },
        "commonJsModuleIndicator": {
          "$ref": "#/definitions/ts.Node"
        },
        "jsGlobalAugmentations": {
          "$ref": "#/definitions/SymbolTable"
        },
        "identifiers": {
          "$ref": "#/definitions/ts.Map"
        },
        "nodeCount": {
          "type": "number"
        },
        "identifierCount": {
          "type": "number"
        },
        "symbolCount": {
          "type": "number"
        },
        "parseDiagnostics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.DiagnosticWithLocation"
          }
        },
        "bindDiagnostics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.DiagnosticWithLocation"
          }
        },
        "bindSuggestionDiagnostics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.DiagnosticWithLocation"
          }
        },
        "jsDocDiagnostics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.DiagnosticWithLocation"
          }
        },
        "additionalSyntacticDiagnostics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.DiagnosticWithLocation"
          }
        },
        "lineMap": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "checkJsDirective": {
          "$ref": "#/definitions/ts.CheckJsDirective"
        },
        "version": {
          "type": "string"
        },
        "pragmas": {
          "$ref": "#/definitions/ts.ReadonlyPragmaMap"
        },
        "localJsxNamespace": {
          "$ref": "#/definitions/ts.__String"
        },
        "localJsxFactory": {
          "$ref": "#/definitions/ts.EntityName"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_declarationBrand",
        "amdDependencies",
        "bindDiagnostics",
        "end",
        "endOfFileToken",
        "fileName",
        "flags",
        "hasNoDefaultLib",
        "identifierCount",
        "identifiers",
        "isDeclarationFile",
        "kind",
        "languageVariant",
        "languageVersion",
        "libReferenceDirectives",
        "lineMap",
        "modifierFlagsCache",
        "nodeCount",
        "originalFileName",
        "parent",
        "parseDiagnostics",
        "path",
        "pos",
        "pragmas",
        "referencedFiles",
        "resolvedPath",
        "scriptKind",
        "statements",
        "symbolCount",
        "text",
        "transformFlags",
        "typeReferenceDirectives",
        "version"
      ]
    },
    "ts.SyntaxKind.SourceFile": {
      "type": "number",
      "enum": [
        290
      ]
    },
    "ts.Token_2": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.EndOfFileToken"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.EndOfFileToken": {
      "type": "number",
      "enum": [
        1
      ]
    },
    "ts.Path": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "__pathBrand": {}
          },
          "required": [
            "__pathBrand"
          ]
        },
        {
          "type": "string"
        }
      ]
    },
    "ts.RedirectInfo": {
      "type": "object",
      "properties": {
        "redirectTarget": {
          "$ref": "#/definitions/ts.SourceFile",
          "description": "Source file this redirects to."
        },
        "unredirected": {
          "$ref": "#/definitions/ts.SourceFile",
          "description": "Source file for the duplicate package. This will not be used by the Program,\nbut we need to keep this around so we can watch for changes in underlying."
        }
      },
      "required": [
        "redirectTarget",
        "unredirected"
      ]
    },
    "ts.AmdDependency": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "path"
      ]
    },
    "ts.FileReference": {
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "fileName",
        "pos"
      ]
    },
    "ts.LanguageVariant": {
      "enum": [
        0,
        1
      ],
      "type": "number"
    },
    "ts.ReadonlyMap<string>": {
      "description": "ES6 Map interface, only read methods included.",
      "type": "object",
      "properties": {
        "size": {
          "type": "number"
        }
      },
      "required": [
        "size"
      ]
    },
    "ts.ScriptTarget": {
      "enum": [
        0,
        1,
        100,
        2,
        3,
        4,
        5,
        6,
        7,
        99
      ],
      "type": "number"
    },
    "ts.ScriptKind": {
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "type": "number"
    },
    "SymbolTable": {
      "type": "object",
      "properties": {}
    },
    "ts.Map": {
      "description": "ES6 Map interface.",
      "type": "object",
      "properties": {
        "size": {
          "type": "number"
        }
      },
      "required": [
        "size"
      ]
    },
    "ts.DiagnosticWithLocation": {
      "type": "object",
      "properties": {
        "file": {
          "$ref": "#/definitions/ts.SourceFile"
        },
        "start": {
          "type": "number"
        },
        "length": {
          "type": "number"
        },
        "reportsUnnecessary": {
          "description": "May store more in future. For now, this will simply be `true` to indicate when a diagnostic is an unused-identifier diagnostic.",
          "type": "object",
          "properties": {}
        },
        "source": {
          "type": "string"
        },
        "relatedInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.DiagnosticRelatedInformation"
          }
        },
        "category": {
          "$ref": "#/definitions/ts.DiagnosticCategory"
        },
        "code": {
          "type": "number"
        },
        "messageText": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.DiagnosticMessageChain"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "required": [
        "category",
        "code",
        "file",
        "length",
        "messageText",
        "start"
      ]
    },
    "ts.DiagnosticRelatedInformation": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/ts.DiagnosticCategory"
        },
        "code": {
          "type": "number"
        },
        "file": {
          "$ref": "#/definitions/ts.SourceFile"
        },
        "start": {
          "type": "number"
        },
        "length": {
          "type": "number"
        },
        "messageText": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.DiagnosticMessageChain"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "required": [
        "category",
        "code",
        "messageText"
      ]
    },
    "ts.DiagnosticCategory": {
      "enum": [
        0,
        1,
        2,
        3
      ],
      "type": "number"
    },
    "ts.DiagnosticMessageChain": {
      "description": "A linked list of formatted diagnostic messages to be used as part of a multiline message.\nIt is built from the bottom up, leaving the head to be the \"main\" diagnostic.\nWhile it seems that DiagnosticMessageChain is structurally similar to DiagnosticMessage,\nthe difference is that messages are all preformatted in DMC.",
      "type": "object",
      "properties": {
        "messageText": {
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/ts.DiagnosticCategory"
        },
        "code": {
          "type": "number"
        },
        "next": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.DiagnosticMessageChain"
          }
        }
      },
      "required": [
        "category",
        "code",
        "messageText"
      ]
    },
    "ts.CheckJsDirective": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "enabled",
        "end",
        "pos"
      ]
    },
    "ts.ReadonlyPragmaMap": {
      "type": "object",
      "properties": {
        "size": {
          "type": "number"
        }
      },
      "required": [
        "size"
      ]
    },
    "ts.ModuleBlock": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ModuleBlock"
        },
        "parent": {
          "$ref": "#/definitions/ts.ModuleDeclaration"
        },
        "statements": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_statementBrand": {}
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "statements",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ModuleBlock": {
      "type": "number",
      "enum": [
        250
      ]
    },
    "ts.NamespaceDeclaration": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "body": {
          "$ref": "#/definitions/ts.NamespaceBody"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ModuleDeclaration"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "$ref": "#/definitions/ts.SourceFile"
            },
            {
              "$ref": "#/definitions/ts.ModuleBlock"
            },
            {
              "$ref": "#/definitions/ts.NamespaceDeclaration"
            },
            {
              "$ref": "#/definitions/ts.JSDocNamespaceDeclaration"
            }
          ]
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_statementBrand": {},
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_statementBrand",
        "body",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.NamespaceBody": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.ModuleBlock"
        },
        {
          "$ref": "#/definitions/ts.NamespaceDeclaration"
        }
      ]
    },
    "ts.JSDocNamespaceDeclaration": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "body": {
          "$ref": "#/definitions/ts.JSDocNamespaceBody"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ModuleDeclaration"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "$ref": "#/definitions/ts.SourceFile"
            },
            {
              "$ref": "#/definitions/ts.ModuleBlock"
            },
            {
              "$ref": "#/definitions/ts.NamespaceDeclaration"
            },
            {
              "$ref": "#/definitions/ts.JSDocNamespaceDeclaration"
            }
          ]
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_statementBrand": {},
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.JSDocNamespaceBody": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Identifier"
        },
        {
          "$ref": "#/definitions/ts.JSDocNamespaceDeclaration"
        }
      ]
    },
    "ts.ModuleName": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Identifier"
        },
        {
          "$ref": "#/definitions/ts.StringLiteral"
        }
      ]
    },
    "ts.ImportEqualsDeclaration": {
      "description": "One of:\n- import x = require(\"mod\");\n- import x = M.x;",
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ImportEqualsDeclaration"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.SourceFile"
            },
            {
              "$ref": "#/definitions/ts.ModuleBlock"
            }
          ]
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "moduleReference": {
          "$ref": "#/definitions/ts.ModuleReference"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_statementBrand": {},
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "moduleReference",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ImportEqualsDeclaration": {
      "type": "number",
      "enum": [
        253
      ]
    },
    "ts.ModuleReference": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Identifier"
        },
        {
          "$ref": "#/definitions/ts.QualifiedName"
        },
        {
          "$ref": "#/definitions/ts.ExternalModuleReference"
        }
      ]
    },
    "ts.ExternalModuleReference": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ExternalModuleReference"
        },
        "parent": {
          "$ref": "#/definitions/ts.ImportEqualsDeclaration"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ExternalModuleReference": {
      "type": "number",
      "enum": [
        265
      ]
    },
    "ts.IndexSignatureDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.IndexSignature"
        },
        "parent": {
          "$ref": "#/definitions/ts.ObjectTypeDeclaration"
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        },
        "_classElementBrand": {},
        "_typeElementBrand": {},
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        }
      },
      "required": [
        "_classElementBrand",
        "_declarationBrand",
        "_typeElementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parameters",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.IndexSignature": {
      "type": "number",
      "enum": [
        167
      ]
    },
    "ts.FunctionTypeNode": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.FunctionType"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parameters",
        "parent",
        "pos",
        "transformFlags",
        "type"
      ]
    },
    "ts.SyntaxKind.FunctionType": {
      "type": "number",
      "enum": [
        170
      ]
    },
    "ts.ConstructorTypeNode": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ConstructorType"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parameters",
        "parent",
        "pos",
        "transformFlags",
        "type"
      ]
    },
    "ts.SyntaxKind.ConstructorType": {
      "type": "number",
      "enum": [
        171
      ]
    },
    "ts.JSDocFunctionType": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocFunctionType"
        },
        "_jsDocTypeBrand": {},
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_jsDocTypeBrand",
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parameters",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocFunctionType": {
      "type": "number",
      "enum": [
        300
      ]
    },
    "ts.ExportDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ExportDeclaration"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.SourceFile"
            },
            {
              "$ref": "#/definitions/ts.ModuleBlock"
            }
          ]
        },
        "isTypeOnly": {
          "type": "boolean"
        },
        "exportClause": {
          "$ref": "#/definitions/ts.NamedExportBindings",
          "description": "Will not be assigned in the case of `export * from \"foo\";`"
        },
        "moduleSpecifier": {
          "$ref": "#/definitions/ts.Expression"
        },
        "name": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "$ref": "#/definitions/ts.StringLiteral"
            },
            {
              "$ref": "#/definitions/ts.NumericLiteral"
            }
          ]
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_statementBrand": {},
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_statementBrand",
        "end",
        "flags",
        "isTypeOnly",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ExportDeclaration": {
      "type": "number",
      "enum": [
        260
      ]
    },
    "ts.NamedExportBindings": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.NamespaceExport"
        },
        {
          "$ref": "#/definitions/ts.NamedExports"
        }
      ]
    },
    "ts.NamespaceExport": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.NamespaceExport"
        },
        "parent": {
          "$ref": "#/definitions/ts.ExportDeclaration"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.NamespaceExport": {
      "type": "number",
      "enum": [
        262
      ]
    },
    "ts.NamedExports": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.NamedExports"
        },
        "parent": {
          "$ref": "#/definitions/ts.ExportDeclaration"
        },
        "elements": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "elements",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.NamedExports": {
      "type": "number",
      "enum": [
        261
      ]
    },
    "ts.ExportSpecifier": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ExportSpecifier"
        },
        "parent": {
          "$ref": "#/definitions/ts.NamedExports"
        },
        "propertyName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ExportSpecifier": {
      "type": "number",
      "enum": [
        263
      ]
    },
    "ts.Token<ts.SyntaxKind.EndOfFileToken>": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.EndOfFileToken"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.JSDocContainer": {
      "type": "object",
      "properties": {
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      }
    },
    "ts.InferTypeNode": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.InferType"
        },
        "typeParameter": {
          "$ref": "#/definitions/ts.TypeParameterDeclaration"
        },
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags",
        "typeParameter"
      ]
    },
    "ts.SyntaxKind.InferType": {
      "type": "number",
      "enum": [
        181
      ]
    },
    "ts.JSDocTemplateTag": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocTemplateTag"
        },
        "constraint": {
          "$ref": "#/definitions/ts.JSDocTypeExpression"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JSDoc"
            },
            {
              "$ref": "#/definitions/ts.JSDocTypeLiteral"
            }
          ]
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags",
        "typeParameters"
      ]
    },
    "ts.SyntaxKind.JSDocTemplateTag": {
      "type": "number",
      "enum": [
        320
      ]
    },
    "ts.ElementAccessExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ElementAccessExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "argumentExpression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "argumentExpression",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ElementAccessExpression": {
      "type": "number",
      "enum": [
        195
      ]
    },
    "ts.StringLiteralLike": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.StringLiteral"
        },
        {
          "$ref": "#/definitions/ts.NoSubstitutionTemplateLiteral"
        }
      ]
    },
    "ts.PartiallyEmittedExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PartiallyEmittedExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.PartiallyEmittedExpression": {
      "type": "number",
      "enum": [
        325
      ]
    },
    "ts.UnaryExpression": {
      "type": "object",
      "properties": {
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_unaryExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.UpdateExpression": {
      "type": "object",
      "properties": {
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.PrefixUnaryOperator": {
      "enum": [
        39,
        40,
        45,
        46,
        53,
        54
      ],
      "type": "number"
    },
    "ts.PrefixUnaryExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PrefixUnaryExpression"
        },
        "operator": {
          "$ref": "#/definitions/ts.PrefixUnaryOperator"
        },
        "operand": {
          "$ref": "#/definitions/ts.UnaryExpression"
        },
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "operand",
        "operator",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.PrefixUnaryExpression": {
      "type": "number",
      "enum": [
        207
      ]
    },
    "ts.PostfixUnaryOperator": {
      "enum": [
        45,
        46
      ],
      "type": "number"
    },
    "ts.PostfixUnaryExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PostfixUnaryExpression"
        },
        "operand": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "operator": {
          "$ref": "#/definitions/ts.PostfixUnaryOperator"
        },
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "operand",
        "operator",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.PostfixUnaryExpression": {
      "type": "number",
      "enum": [
        208
      ]
    },
    "ts.MemberExpression": {
      "type": "object",
      "properties": {
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.PrimaryExpression": {
      "type": "object",
      "properties": {
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.NullLiteral": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.NullKeyword"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_typeNodeBrand": {}
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_typeNodeBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.NullKeyword": {
      "type": "number",
      "enum": [
        100
      ]
    },
    "ts.BooleanLiteral": {
      "type": "object",
      "properties": {
        "kind": {
          "enum": [
            106,
            91
          ],
          "type": "number"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_typeNodeBrand": {}
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_typeNodeBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.ThisExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ThisKeyword"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_typeNodeBrand": {}
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_typeNodeBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ThisKeyword": {
      "type": "number",
      "enum": [
        104
      ]
    },
    "ts.SuperExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.SuperKeyword"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.SuperKeyword": {
      "type": "number",
      "enum": [
        102
      ]
    },
    "ts.ImportExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ImportKeyword"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ImportKeyword": {
      "type": "number",
      "enum": [
        96
      ]
    },
    "ts.DeleteExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.DeleteExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.UnaryExpression"
        },
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_unaryExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.DeleteExpression": {
      "type": "number",
      "enum": [
        203
      ]
    },
    "ts.TypeOfExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.TypeOfExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.UnaryExpression"
        },
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_unaryExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.TypeOfExpression": {
      "type": "number",
      "enum": [
        204
      ]
    },
    "ts.VoidExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.VoidExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.UnaryExpression"
        },
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_unaryExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.VoidExpression": {
      "type": "number",
      "enum": [
        205
      ]
    },
    "ts.AwaitExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.AwaitExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.UnaryExpression"
        },
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_unaryExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.AwaitExpression": {
      "type": "number",
      "enum": [
        206
      ]
    },
    "ts.YieldExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.YieldExpression"
        },
        "asteriskToken": {
          "$ref": "#/definitions/ts.AsteriskToken"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.YieldExpression": {
      "type": "number",
      "enum": [
        212
      ]
    },
    "ts.SyntheticExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.SyntheticExpression"
        },
        "isSpread": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/__type"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "end",
        "flags",
        "isSpread",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags",
        "type"
      ]
    },
    "ts.SyntaxKind.SyntheticExpression": {
      "type": "number",
      "enum": [
        220
      ]
    },
    "__type": {
      "type": "object",
      "properties": {}
    },
    "ts.SyntaxKind.AsteriskAsteriskToken": {
      "type": "number",
      "enum": [
        42
      ]
    },
    "ts.MultiplicativeOperator": {
      "enum": [
        41,
        43,
        44
      ],
      "type": "number"
    },
    "ts.MultiplicativeOperatorOrHigher": {
      "enum": [
        41,
        42,
        43,
        44
      ],
      "type": "number"
    },
    "ts.AdditiveOperator": {
      "enum": [
        39,
        40
      ],
      "type": "number"
    },
    "ts.AdditiveOperatorOrHigher": {
      "enum": [
        39,
        40,
        41,
        42,
        43,
        44
      ],
      "type": "number"
    },
    "ts.ShiftOperator": {
      "enum": [
        47,
        48,
        49
      ],
      "type": "number"
    },
    "ts.ShiftOperatorOrHigher": {
      "enum": [
        39,
        40,
        41,
        42,
        43,
        44,
        47,
        48,
        49
      ],
      "type": "number"
    },
    "ts.RelationalOperator": {
      "enum": [
        29,
        31,
        32,
        33,
        97,
        98
      ],
      "type": "number"
    },
    "ts.RelationalOperatorOrHigher": {
      "enum": [
        29,
        31,
        32,
        33,
        39,
        40,
        41,
        42,
        43,
        44,
        47,
        48,
        49,
        97,
        98
      ],
      "type": "number"
    },
    "ts.EqualityOperator": {
      "enum": [
        34,
        35,
        36,
        37
      ],
      "type": "number"
    },
    "ts.EqualityOperatorOrHigher": {
      "enum": [
        29,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        44,
        47,
        48,
        49,
        97,
        98
      ],
      "type": "number"
    },
    "ts.BitwiseOperator": {
      "enum": [
        50,
        51,
        52
      ],
      "type": "number"
    },
    "ts.BitwiseOperatorOrHigher": {
      "enum": [
        29,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        44,
        47,
        48,
        49,
        50,
        51,
        52,
        97,
        98
      ],
      "type": "number"
    },
    "ts.LogicalOperator": {
      "enum": [
        55,
        56
      ],
      "type": "number"
    },
    "ts.LogicalOperatorOrHigher": {
      "enum": [
        29,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        44,
        47,
        48,
        49,
        50,
        51,
        52,
        55,
        56,
        97,
        98
      ],
      "type": "number"
    },
    "ts.CompoundAssignmentOperator": {
      "enum": [
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74
      ],
      "type": "number"
    },
    "ts.AssignmentOperator": {
      "enum": [
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74
      ],
      "type": "number"
    },
    "ts.AssignmentOperatorOrHigher": {
      "enum": [
        29,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        44,
        47,
        48,
        49,
        50,
        51,
        52,
        55,
        56,
        60,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        97,
        98
      ],
      "type": "number"
    },
    "ts.BinaryOperator": {
      "enum": [
        27,
        29,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        44,
        47,
        48,
        49,
        50,
        51,
        52,
        55,
        56,
        60,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        97,
        98
      ],
      "type": "number"
    },
    "ts.Token_3": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.Token.TKind_20"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.Token.TKind_20": {
      "enum": [
        27,
        29,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        44,
        47,
        48,
        49,
        50,
        51,
        52,
        55,
        56,
        60,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        97,
        98
      ],
      "type": "number"
    },
    "ts.BinaryExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.BinaryExpression"
        },
        "left": {
          "$ref": "#/definitions/ts.Expression"
        },
        "operatorToken": {
          "$ref": "#/definitions/ts.Token_3"
        },
        "right": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "end",
        "flags",
        "kind",
        "left",
        "modifierFlagsCache",
        "operatorToken",
        "parent",
        "pos",
        "right",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.BinaryExpression": {
      "type": "number",
      "enum": [
        209
      ]
    },
    "ts.Token_4": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.Token.TKind_21"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.Token.TKind_21": {
      "enum": [
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74
      ],
      "type": "number"
    },
    "ts.ObjectDestructuringAssignment": {
      "type": "object",
      "properties": {
        "left": {
          "$ref": "#/definitions/ts.ObjectLiteralExpression"
        },
        "operatorToken": {
          "$ref": "#/definitions/ts.Token_5"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.BinaryExpression"
        },
        "right": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "end",
        "flags",
        "kind",
        "left",
        "modifierFlagsCache",
        "operatorToken",
        "parent",
        "pos",
        "right",
        "transformFlags"
      ]
    },
    "ts.Token_5": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.EqualsToken"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.ArrayDestructuringAssignment": {
      "type": "object",
      "properties": {
        "left": {
          "$ref": "#/definitions/ts.ArrayLiteralExpression"
        },
        "operatorToken": {
          "$ref": "#/definitions/ts.Token_5"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.BinaryExpression"
        },
        "right": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "end",
        "flags",
        "kind",
        "left",
        "modifierFlagsCache",
        "operatorToken",
        "parent",
        "pos",
        "right",
        "transformFlags"
      ]
    },
    "ts.ArrayLiteralExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ArrayLiteralExpression"
        },
        "elements": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "multiLine": {
          "type": "boolean"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "elements",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ArrayLiteralExpression": {
      "type": "number",
      "enum": [
        192
      ]
    },
    "ts.DestructuringAssignment": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.ObjectDestructuringAssignment"
        },
        {
          "$ref": "#/definitions/ts.ArrayDestructuringAssignment"
        }
      ]
    },
    "ts.BindingOrAssignmentElement": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.ParameterDeclaration"
        },
        {
          "$ref": "#/definitions/ts.SpreadAssignment"
        },
        {
          "$ref": "#/definitions/ts.ShorthandPropertyAssignment"
        },
        {
          "$ref": "#/definitions/ts.PropertyAssignment"
        },
        {
          "$ref": "#/definitions/ts.VariableDeclaration"
        },
        {
          "$ref": "#/definitions/ts.BindingElement"
        },
        {
          "$ref": "#/definitions/ts.Identifier"
        },
        {
          "$ref": "#/definitions/ts.ElementAccessExpression"
        },
        {
          "$ref": "#/definitions/ts.PropertyAccessExpression"
        },
        {
          "$ref": "#/definitions/ts.OmittedExpression"
        },
        {
          "$ref": "#/definitions/ts.SpreadElement"
        },
        {
          "$ref": "#/definitions/ts.ArrayLiteralExpression"
        },
        {
          "$ref": "#/definitions/ts.ObjectLiteralExpression"
        },
        {
          "$ref": "#/definitions/ts.AssignmentExpression<ts.EqualsToken>"
        }
      ]
    },
    "ts.PropertyAccessExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PropertyAccessExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "name": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "$ref": "#/definitions/ts.PrivateIdentifier"
            }
          ]
        },
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SpreadElement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.SpreadElement"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.CallExpression"
            },
            {
              "$ref": "#/definitions/ts.NewExpression"
            },
            {
              "$ref": "#/definitions/ts.ArrayLiteralExpression"
            }
          ]
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.SpreadElement": {
      "type": "number",
      "enum": [
        213
      ]
    },
    "ts.CallExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.CallExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "arguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "arguments",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.CallExpression": {
      "type": "number",
      "enum": [
        196
      ]
    },
    "ts.NewExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.NewExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "arguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.NewExpression": {
      "type": "number",
      "enum": [
        197
      ]
    },
    "ts.AssignmentExpression<ts.EqualsToken>": {
      "type": "object",
      "properties": {
        "left": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "operatorToken": {
          "$ref": "#/definitions/ts.Token_5"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.BinaryExpression"
        },
        "right": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "end",
        "flags",
        "kind",
        "left",
        "modifierFlagsCache",
        "operatorToken",
        "parent",
        "pos",
        "right",
        "transformFlags"
      ]
    },
    "ts.BindingOrAssignmentElementRestIndicator": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.SpreadAssignment"
        },
        {
          "$ref": "#/definitions/ts.DotDotDotToken"
        },
        {
          "$ref": "#/definitions/ts.SpreadElement"
        }
      ]
    },
    "ts.BindingOrAssignmentElementTarget": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Identifier"
        },
        {
          "$ref": "#/definitions/ts.ElementAccessExpression"
        },
        {
          "$ref": "#/definitions/ts.ObjectBindingPattern"
        },
        {
          "$ref": "#/definitions/ts.ArrayBindingPattern"
        },
        {
          "$ref": "#/definitions/ts.PropertyAccessExpression"
        },
        {
          "$ref": "#/definitions/ts.OmittedExpression"
        },
        {
          "$ref": "#/definitions/ts.ArrayLiteralExpression"
        },
        {
          "$ref": "#/definitions/ts.ObjectLiteralExpression"
        }
      ]
    },
    "ts.ObjectBindingOrAssignmentPattern": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.ObjectBindingPattern"
        },
        {
          "$ref": "#/definitions/ts.ObjectLiteralExpression"
        }
      ]
    },
    "ts.ArrayBindingOrAssignmentPattern": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.ArrayBindingPattern"
        },
        {
          "$ref": "#/definitions/ts.ArrayLiteralExpression"
        }
      ]
    },
    "ts.AssignmentPattern": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.ArrayLiteralExpression"
        },
        {
          "$ref": "#/definitions/ts.ObjectLiteralExpression"
        }
      ]
    },
    "ts.BindingOrAssignmentPattern": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.ObjectBindingPattern"
        },
        {
          "$ref": "#/definitions/ts.ArrayBindingPattern"
        },
        {
          "$ref": "#/definitions/ts.ArrayLiteralExpression"
        },
        {
          "$ref": "#/definitions/ts.ObjectLiteralExpression"
        }
      ]
    },
    "ts.ConditionalExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ConditionalExpression"
        },
        "condition": {
          "$ref": "#/definitions/ts.Expression"
        },
        "questionToken": {
          "$ref": "#/definitions/ts.QuestionToken"
        },
        "whenTrue": {
          "$ref": "#/definitions/ts.Expression"
        },
        "colonToken": {
          "$ref": "#/definitions/ts.Token_6"
        },
        "whenFalse": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "colonToken",
        "condition",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "questionToken",
        "transformFlags",
        "whenFalse",
        "whenTrue"
      ]
    },
    "ts.SyntaxKind.ConditionalExpression": {
      "type": "number",
      "enum": [
        210
      ]
    },
    "ts.Token_6": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ColonToken"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ColonToken": {
      "type": "number",
      "enum": [
        58
      ]
    },
    "ts.LiteralLikeNode": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "isUnterminated": {
          "type": "boolean"
        },
        "hasExtendedUnicodeEscape": {
          "type": "boolean"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "text",
        "transformFlags"
      ]
    },
    "ts.TemplateLiteralLikeNode": {
      "type": "object",
      "properties": {
        "rawText": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "isUnterminated": {
          "type": "boolean"
        },
        "hasExtendedUnicodeEscape": {
          "type": "boolean"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "text",
        "transformFlags"
      ]
    },
    "ts.LiteralExpression": {
      "type": "object",
      "properties": {
        "_literalExpressionBrand": {},
        "text": {
          "type": "string"
        },
        "isUnterminated": {
          "type": "boolean"
        },
        "hasExtendedUnicodeEscape": {
          "type": "boolean"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {}
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_literalExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "text",
        "transformFlags"
      ]
    },
    "ts.RegularExpressionLiteral": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.RegularExpressionLiteral"
        },
        "_literalExpressionBrand": {},
        "text": {
          "type": "string"
        },
        "isUnterminated": {
          "type": "boolean"
        },
        "hasExtendedUnicodeEscape": {
          "type": "boolean"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {}
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_literalExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "text",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.RegularExpressionLiteral": {
      "type": "number",
      "enum": [
        13
      ]
    },
    "ts.BigIntLiteral": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.BigIntLiteral"
        },
        "_literalExpressionBrand": {},
        "text": {
          "type": "string"
        },
        "isUnterminated": {
          "type": "boolean"
        },
        "hasExtendedUnicodeEscape": {
          "type": "boolean"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {}
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_literalExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "text",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.BigIntLiteral": {
      "type": "number",
      "enum": [
        9
      ]
    },
    "ts.TemplateHead": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.TemplateHead"
        },
        "parent": {
          "$ref": "#/definitions/ts.TemplateExpression"
        },
        "templateFlags": {
          "$ref": "#/definitions/ts.TokenFlags"
        },
        "rawText": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "isUnterminated": {
          "type": "boolean"
        },
        "hasExtendedUnicodeEscape": {
          "type": "boolean"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "text",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.TemplateHead": {
      "type": "number",
      "enum": [
        15
      ]
    },
    "ts.TemplateExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.TemplateExpression"
        },
        "head": {
          "$ref": "#/definitions/ts.TemplateHead"
        },
        "templateSpans": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "head",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "templateSpans",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.TemplateExpression": {
      "type": "number",
      "enum": [
        211
      ]
    },
    "ts.TemplateSpan": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.TemplateSpan"
        },
        "parent": {
          "$ref": "#/definitions/ts.TemplateExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "literal": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.TemplateMiddle"
            },
            {
              "$ref": "#/definitions/ts.TemplateTail"
            }
          ]
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "expression",
        "flags",
        "kind",
        "literal",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.TemplateSpan": {
      "type": "number",
      "enum": [
        221
      ]
    },
    "ts.TemplateMiddle": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.TemplateMiddle"
        },
        "parent": {
          "$ref": "#/definitions/ts.TemplateSpan"
        },
        "templateFlags": {
          "$ref": "#/definitions/ts.TokenFlags"
        },
        "rawText": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "isUnterminated": {
          "type": "boolean"
        },
        "hasExtendedUnicodeEscape": {
          "type": "boolean"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "text",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.TemplateMiddle": {
      "type": "number",
      "enum": [
        16
      ]
    },
    "ts.TemplateTail": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.TemplateTail"
        },
        "parent": {
          "$ref": "#/definitions/ts.TemplateSpan"
        },
        "templateFlags": {
          "$ref": "#/definitions/ts.TokenFlags"
        },
        "rawText": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "isUnterminated": {
          "type": "boolean"
        },
        "hasExtendedUnicodeEscape": {
          "type": "boolean"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "text",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.TemplateTail": {
      "type": "number",
      "enum": [
        17
      ]
    },
    "ts.TemplateLiteral": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.NoSubstitutionTemplateLiteral"
        },
        {
          "$ref": "#/definitions/ts.TemplateExpression"
        }
      ]
    },
    "ts.EntityNameOrEntityNameExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Identifier"
        },
        {
          "$ref": "#/definitions/ts.QualifiedName"
        },
        {
          "$ref": "#/definitions/ts.PropertyAccessEntityNameExpression"
        }
      ]
    },
    "ts.AccessExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.ElementAccessExpression"
        },
        {
          "$ref": "#/definitions/ts.PropertyAccessExpression"
        }
      ]
    },
    "ts.PrivateIdentifierPropertyAccessExpression": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/ts.PrivateIdentifier"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PropertyAccessExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.PropertyAccessChain": {
      "type": "object",
      "properties": {
        "_optionalChainBrand": {},
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PropertyAccessExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_optionalChainBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.PropertyAccessChainRoot": {
      "type": "object",
      "properties": {
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "_optionalChainBrand": {},
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PropertyAccessExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_optionalChainBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "questionDotToken",
        "transformFlags"
      ]
    },
    "ts.SuperPropertyAccessExpression": {
      "type": "object",
      "properties": {
        "expression": {
          "$ref": "#/definitions/ts.SuperExpression"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PropertyAccessExpression"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "name": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "$ref": "#/definitions/ts.PrivateIdentifier"
            }
          ]
        },
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.ElementAccessChain": {
      "type": "object",
      "properties": {
        "_optionalChainBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ElementAccessExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "argumentExpression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_optionalChainBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "argumentExpression",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.ElementAccessChainRoot": {
      "type": "object",
      "properties": {
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "_optionalChainBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ElementAccessExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "argumentExpression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_optionalChainBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "argumentExpression",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "questionDotToken",
        "transformFlags"
      ]
    },
    "ts.SuperElementAccessExpression": {
      "type": "object",
      "properties": {
        "expression": {
          "$ref": "#/definitions/ts.SuperExpression"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ElementAccessExpression"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "argumentExpression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "argumentExpression",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SuperProperty": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.SuperPropertyAccessExpression"
        },
        {
          "$ref": "#/definitions/ts.SuperElementAccessExpression"
        }
      ]
    },
    "ts.CallChain": {
      "type": "object",
      "properties": {
        "_optionalChainBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.CallExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "arguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_optionalChainBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "arguments",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.CallChainRoot": {
      "type": "object",
      "properties": {
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "_optionalChainBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.CallExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "arguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_optionalChainBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "arguments",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "questionDotToken",
        "transformFlags"
      ]
    },
    "ts.OptionalChain": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.PropertyAccessChain"
        },
        {
          "$ref": "#/definitions/ts.ElementAccessChain"
        },
        {
          "$ref": "#/definitions/ts.CallChain"
        }
      ]
    },
    "ts.OptionalChainRoot": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.PropertyAccessChainRoot"
        },
        {
          "$ref": "#/definitions/ts.ElementAccessChainRoot"
        },
        {
          "$ref": "#/definitions/ts.CallChainRoot"
        }
      ]
    },
    "ts.WellKnownSymbolExpression": {
      "type": "object",
      "properties": {
        "expression": {
          "allOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "type": "object",
              "properties": {
                "escapedText": {
                  "type": "string",
                  "enum": [
                    "Symbol"
                  ]
                }
              },
              "required": [
                "escapedText"
              ]
            }
          ]
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PropertyAccessExpression"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.BindableObjectDefinePropertyCall": {
      "allOf": [
        {
          "$ref": "#/definitions/ts.CallExpression"
        },
        {
          "type": "object",
          "properties": {
            "arguments": {
              "type": "object",
              "properties": {
                "0": {
                  "$ref": "#/definitions/ts.BindableStaticNameExpression"
                },
                "1": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ts.StringLiteral"
                    },
                    {
                      "$ref": "#/definitions/ts.NumericLiteral"
                    },
                    {
                      "$ref": "#/definitions/ts.NoSubstitutionTemplateLiteral"
                    }
                  ]
                },
                "2": {
                  "$ref": "#/definitions/ts.ObjectLiteralExpression"
                }
              },
              "required": [
                "0",
                "1",
                "2"
              ]
            }
          },
          "required": [
            "arguments"
          ]
        }
      ]
    },
    "ts.BindableStaticNameExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Identifier"
        },
        {
          "$ref": "#/definitions/ts.PropertyAccessEntityNameExpression"
        },
        {
          "allOf": [
            {
              "$ref": "#/definitions/ts.ElementAccessExpression"
            },
            {
              "$ref": "#/definitions/ts.Declaration"
            },
            {
              "type": "object",
              "properties": {
                "argumentExpression": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ts.StringLiteral"
                    },
                    {
                      "$ref": "#/definitions/ts.NumericLiteral"
                    },
                    {
                      "$ref": "#/definitions/ts.NoSubstitutionTemplateLiteral"
                    },
                    {
                      "$ref": "#/definitions/ts.WellKnownSymbolExpression"
                    }
                  ]
                }
              },
              "required": [
                "argumentExpression"
              ]
            },
            {
              "type": "object",
              "properties": {
                "expression": {
                  "$ref": "#/definitions/ts.BindableStaticNameExpression"
                }
              },
              "required": [
                "expression"
              ]
            }
          ]
        }
      ]
    },
    "ts.LiteralLikeElementAccessExpression": {
      "allOf": [
        {
          "$ref": "#/definitions/ts.ElementAccessExpression"
        },
        {
          "$ref": "#/definitions/ts.Declaration"
        },
        {
          "type": "object",
          "properties": {
            "argumentExpression": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ts.StringLiteral"
                },
                {
                  "$ref": "#/definitions/ts.NumericLiteral"
                },
                {
                  "$ref": "#/definitions/ts.NoSubstitutionTemplateLiteral"
                },
                {
                  "$ref": "#/definitions/ts.WellKnownSymbolExpression"
                }
              ]
            }
          },
          "required": [
            "argumentExpression"
          ]
        }
      ]
    },
    "ts.BindableStaticElementAccessExpression": {
      "allOf": [
        {
          "$ref": "#/definitions/ts.ElementAccessExpression"
        },
        {
          "$ref": "#/definitions/ts.Declaration"
        },
        {
          "type": "object",
          "properties": {
            "argumentExpression": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ts.StringLiteral"
                },
                {
                  "$ref": "#/definitions/ts.NumericLiteral"
                },
                {
                  "$ref": "#/definitions/ts.NoSubstitutionTemplateLiteral"
                },
                {
                  "$ref": "#/definitions/ts.WellKnownSymbolExpression"
                }
              ]
            }
          },
          "required": [
            "argumentExpression"
          ]
        },
        {
          "type": "object",
          "properties": {
            "expression": {
              "$ref": "#/definitions/ts.BindableStaticNameExpression"
            }
          },
          "required": [
            "expression"
          ]
        }
      ]
    },
    "ts.BindableElementAccessExpression": {
      "allOf": [
        {
          "$ref": "#/definitions/ts.ElementAccessExpression"
        },
        {
          "type": "object",
          "properties": {
            "expression": {
              "$ref": "#/definitions/ts.BindableStaticNameExpression"
            }
          },
          "required": [
            "expression"
          ]
        }
      ]
    },
    "ts.BindableStaticAccessExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.PropertyAccessEntityNameExpression"
        },
        {
          "allOf": [
            {
              "$ref": "#/definitions/ts.ElementAccessExpression"
            },
            {
              "$ref": "#/definitions/ts.Declaration"
            },
            {
              "type": "object",
              "properties": {
                "argumentExpression": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ts.StringLiteral"
                    },
                    {
                      "$ref": "#/definitions/ts.NumericLiteral"
                    },
                    {
                      "$ref": "#/definitions/ts.NoSubstitutionTemplateLiteral"
                    },
                    {
                      "$ref": "#/definitions/ts.WellKnownSymbolExpression"
                    }
                  ]
                }
              },
              "required": [
                "argumentExpression"
              ]
            },
            {
              "type": "object",
              "properties": {
                "expression": {
                  "$ref": "#/definitions/ts.BindableStaticNameExpression"
                }
              },
              "required": [
                "expression"
              ]
            }
          ]
        }
      ]
    },
    "ts.BindableAccessExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.PropertyAccessEntityNameExpression"
        },
        {
          "allOf": [
            {
              "$ref": "#/definitions/ts.ElementAccessExpression"
            },
            {
              "type": "object",
              "properties": {
                "expression": {
                  "$ref": "#/definitions/ts.BindableStaticNameExpression"
                }
              },
              "required": [
                "expression"
              ]
            }
          ]
        }
      ]
    },
    "ts.BindableStaticPropertyAssignmentExpression": {
      "type": "object",
      "properties": {
        "left": {
          "$ref": "#/definitions/ts.BindableStaticAccessExpression"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.BinaryExpression"
        },
        "operatorToken": {
          "$ref": "#/definitions/ts.Token_3"
        },
        "right": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "end",
        "flags",
        "kind",
        "left",
        "modifierFlagsCache",
        "operatorToken",
        "parent",
        "pos",
        "right",
        "transformFlags"
      ]
    },
    "ts.BindablePropertyAssignmentExpression": {
      "type": "object",
      "properties": {
        "left": {
          "$ref": "#/definitions/ts.BindableAccessExpression"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.BinaryExpression"
        },
        "operatorToken": {
          "$ref": "#/definitions/ts.Token_3"
        },
        "right": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "end",
        "flags",
        "kind",
        "left",
        "modifierFlagsCache",
        "operatorToken",
        "parent",
        "pos",
        "right",
        "transformFlags"
      ]
    },
    "ts.SuperCall": {
      "type": "object",
      "properties": {
        "expression": {
          "$ref": "#/definitions/ts.SuperExpression"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.CallExpression"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "arguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "arguments",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.ImportCall": {
      "type": "object",
      "properties": {
        "expression": {
          "$ref": "#/definitions/ts.ImportExpression"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.CallExpression"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "arguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "arguments",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.TaggedTemplateExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.TaggedTemplateExpression"
        },
        "tag": {
          "$ref": "#/definitions/ts.LeftHandSideExpression"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "template": {
          "$ref": "#/definitions/ts.TemplateLiteral"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tag",
        "template",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.TaggedTemplateExpression": {
      "type": "number",
      "enum": [
        198
      ]
    },
    "ts.CallLikeExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.CallExpression"
        },
        {
          "$ref": "#/definitions/ts.NewExpression"
        },
        {
          "$ref": "#/definitions/ts.TaggedTemplateExpression"
        },
        {
          "$ref": "#/definitions/ts.JsxOpeningElement"
        },
        {
          "$ref": "#/definitions/ts.JsxSelfClosingElement"
        },
        {
          "$ref": "#/definitions/ts.Decorator"
        }
      ]
    },
    "ts.JsxOpeningElement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JsxOpeningElement"
        },
        "parent": {
          "$ref": "#/definitions/ts.JsxElement"
        },
        "tagName": {
          "$ref": "#/definitions/ts.JsxTagNameExpression"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "attributes": {
          "$ref": "#/definitions/ts.JsxAttributes"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "attributes",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JsxOpeningElement": {
      "type": "number",
      "enum": [
        268
      ]
    },
    "ts.JsxElement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JsxElement"
        },
        "openingElement": {
          "$ref": "#/definitions/ts.JsxOpeningElement"
        },
        "children": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "closingElement": {
          "$ref": "#/definitions/ts.JsxClosingElement"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "children",
        "closingElement",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "openingElement",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JsxElement": {
      "type": "number",
      "enum": [
        266
      ]
    },
    "ts.JsxSelfClosingElement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JsxSelfClosingElement"
        },
        "tagName": {
          "$ref": "#/definitions/ts.JsxTagNameExpression"
        },
        "typeArguments": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "attributes": {
          "$ref": "#/definitions/ts.JsxAttributes"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "attributes",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JsxSelfClosingElement": {
      "type": "number",
      "enum": [
        267
      ]
    },
    "ts.JsxTagNameExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Identifier"
        },
        {
          "$ref": "#/definitions/ts.ThisExpression"
        },
        {
          "$ref": "#/definitions/ts.JsxTagNamePropertyAccess"
        }
      ]
    },
    "ts.JsxTagNamePropertyAccess": {
      "type": "object",
      "properties": {
        "expression": {
          "$ref": "#/definitions/ts.JsxTagNameExpression"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.PropertyAccessExpression"
        },
        "questionDotToken": {
          "$ref": "#/definitions/ts.QuestionDotToken"
        },
        "name": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "$ref": "#/definitions/ts.PrivateIdentifier"
            }
          ]
        },
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.JsxAttributes": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JsxAttributes"
        },
        "parent": {
          "$ref": "#/definitions/ts.JsxOpeningLikeElement"
        },
        "properties": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "properties",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JsxAttributes": {
      "type": "number",
      "enum": [
        274
      ]
    },
    "ts.JsxOpeningLikeElement": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.JsxOpeningElement"
        },
        {
          "$ref": "#/definitions/ts.JsxSelfClosingElement"
        }
      ]
    },
    "ts.JsxAttribute": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JsxAttribute"
        },
        "parent": {
          "$ref": "#/definitions/ts.JsxAttributes"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "initializer": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.StringLiteral"
            },
            {
              "$ref": "#/definitions/ts.JsxExpression"
            }
          ]
        },
        "_objectLiteralBrand": {},
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_declarationBrand",
        "_objectLiteralBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JsxAttribute": {
      "type": "number",
      "enum": [
        273
      ]
    },
    "ts.JsxExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JsxExpression"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JsxAttribute"
            },
            {
              "$ref": "#/definitions/ts.JsxElement"
            },
            {
              "$ref": "#/definitions/ts.JsxSpreadAttribute"
            }
          ]
        },
        "dotDotDotToken": {
          "$ref": "#/definitions/ts.Token<ts.SyntaxKind.DotDotDotToken>"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JsxExpression": {
      "type": "number",
      "enum": [
        276
      ]
    },
    "ts.JsxSpreadAttribute": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JsxSpreadAttribute"
        },
        "parent": {
          "$ref": "#/definitions/ts.JsxAttributes"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_objectLiteralBrand": {},
        "name": {
          "$ref": "#/definitions/ts.PropertyName"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_declarationBrand",
        "_objectLiteralBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JsxSpreadAttribute": {
      "type": "number",
      "enum": [
        275
      ]
    },
    "ts.Token<ts.SyntaxKind.DotDotDotToken>": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.DotDotDotToken"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.JsxFragment": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JsxFragment"
        },
        "openingFragment": {
          "$ref": "#/definitions/ts.JsxOpeningFragment"
        },
        "children": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "closingFragment": {
          "$ref": "#/definitions/ts.JsxClosingFragment"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "children",
        "closingFragment",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "openingFragment",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JsxFragment": {
      "type": "number",
      "enum": [
        270
      ]
    },
    "ts.JsxOpeningFragment": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JsxOpeningFragment"
        },
        "parent": {
          "$ref": "#/definitions/ts.JsxFragment"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JsxOpeningFragment": {
      "type": "number",
      "enum": [
        271
      ]
    },
    "ts.JsxClosingFragment": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JsxClosingFragment"
        },
        "parent": {
          "$ref": "#/definitions/ts.JsxFragment"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JsxClosingFragment": {
      "type": "number",
      "enum": [
        272
      ]
    },
    "ts.JsxText": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JsxText"
        },
        "containsOnlyTriviaWhiteSpaces": {
          "type": "boolean"
        },
        "parent": {
          "$ref": "#/definitions/ts.JsxElement"
        },
        "text": {
          "type": "string"
        },
        "isUnterminated": {
          "type": "boolean"
        },
        "hasExtendedUnicodeEscape": {
          "type": "boolean"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "containsOnlyTriviaWhiteSpaces",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "text",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JsxText": {
      "type": "number",
      "enum": [
        11
      ]
    },
    "ts.JsxClosingElement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JsxClosingElement"
        },
        "parent": {
          "$ref": "#/definitions/ts.JsxElement"
        },
        "tagName": {
          "$ref": "#/definitions/ts.JsxTagNameExpression"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JsxClosingElement": {
      "type": "number",
      "enum": [
        269
      ]
    },
    "ts.AsExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.AsExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags",
        "type"
      ]
    },
    "ts.SyntaxKind.AsExpression": {
      "type": "number",
      "enum": [
        217
      ]
    },
    "ts.TypeAssertion": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.TypeAssertionExpression"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "expression": {
          "$ref": "#/definitions/ts.UnaryExpression"
        },
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_unaryExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags",
        "type"
      ]
    },
    "ts.SyntaxKind.TypeAssertionExpression": {
      "type": "number",
      "enum": [
        199
      ]
    },
    "ts.AssertionExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.TypeAssertion"
        },
        {
          "$ref": "#/definitions/ts.AsExpression"
        }
      ]
    },
    "ts.NonNullExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.NonNullExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.NonNullExpression": {
      "type": "number",
      "enum": [
        218
      ]
    },
    "ts.MetaProperty": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.MetaProperty"
        },
        "keywordToken": {
          "enum": [
            96,
            99
          ],
          "type": "number"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "keywordToken",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.MetaProperty": {
      "type": "number",
      "enum": [
        219
      ]
    },
    "ts.ImportMetaProperty": {
      "type": "object",
      "properties": {
        "keywordToken": {
          "$ref": "#/definitions/ts.SyntaxKind.ImportKeyword"
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "type": "object",
              "properties": {
                "escapedText": {
                  "type": "string",
                  "enum": [
                    "meta"
                  ]
                }
              },
              "required": [
                "escapedText"
              ]
            }
          ]
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.MetaProperty"
        },
        "_primaryExpressionBrand": {},
        "_memberExpressionBrand": {},
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_memberExpressionBrand",
        "_primaryExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "flags",
        "keywordToken",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.JsxAttributeLike": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.JsxAttribute"
        },
        {
          "$ref": "#/definitions/ts.JsxSpreadAttribute"
        }
      ]
    },
    "ts.JsxChild": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.JsxSelfClosingElement"
        },
        {
          "$ref": "#/definitions/ts.JsxElement"
        },
        {
          "$ref": "#/definitions/ts.JsxFragment"
        },
        {
          "$ref": "#/definitions/ts.JsxExpression"
        },
        {
          "$ref": "#/definitions/ts.JsxText"
        }
      ]
    },
    "ts.NotEmittedStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.NotEmittedStatement"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.NotEmittedStatement": {
      "type": "number",
      "enum": [
        324
      ]
    },
    "ts.EndOfDeclarationMarker": {
      "description": "Marks the end of transformed declaration to properly emit exports.",
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.EndOfDeclarationMarker"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.EndOfDeclarationMarker": {
      "type": "number",
      "enum": [
        328
      ]
    },
    "ts.CommaListExpression": {
      "description": "A list of comma-separated expressions. This node is only created by transformations.",
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.CommaListExpression"
        },
        "elements": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "elements",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.CommaListExpression": {
      "type": "number",
      "enum": [
        326
      ]
    },
    "ts.MergeDeclarationMarker": {
      "description": "Marks the beginning of a merged transformed declaration.",
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.MergeDeclarationMarker"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.MergeDeclarationMarker": {
      "type": "number",
      "enum": [
        327
      ]
    },
    "ts.SyntheticReferenceExpression": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.SyntheticReferenceExpression"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "thisArg": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_leftHandSideExpressionBrand": {},
        "_updateExpressionBrand": {},
        "_unaryExpressionBrand": {},
        "_expressionBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_expressionBrand",
        "_leftHandSideExpressionBrand",
        "_unaryExpressionBrand",
        "_updateExpressionBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "thisArg",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.SyntheticReferenceExpression": {
      "type": "number",
      "enum": [
        329
      ]
    },
    "ts.EmptyStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.EmptyStatement"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.EmptyStatement": {
      "type": "number",
      "enum": [
        224
      ]
    },
    "ts.DebuggerStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.DebuggerStatement"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.DebuggerStatement": {
      "type": "number",
      "enum": [
        241
      ]
    },
    "ts.MissingDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.MissingDeclaration"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_statementBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.MissingDeclaration": {
      "type": "number",
      "enum": [
        264
      ]
    },
    "ts.BlockLike": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Block"
        },
        {
          "$ref": "#/definitions/ts.SourceFile"
        },
        {
          "$ref": "#/definitions/ts.ModuleBlock"
        },
        {
          "$ref": "#/definitions/ts.CaseClause"
        },
        {
          "$ref": "#/definitions/ts.DefaultClause"
        }
      ]
    },
    "ts.CaseClause": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.CaseClause"
        },
        "parent": {
          "$ref": "#/definitions/ts.CaseBlock"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "statements": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "fallthroughFlowNode": {
          "$ref": "#/definitions/FlowNode"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "statements",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.CaseClause": {
      "type": "number",
      "enum": [
        277
      ]
    },
    "ts.CaseBlock": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.CaseBlock"
        },
        "parent": {
          "$ref": "#/definitions/ts.SwitchStatement"
        },
        "clauses": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "clauses",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.CaseBlock": {
      "type": "number",
      "enum": [
        251
      ]
    },
    "ts.SwitchStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.SwitchStatement"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "caseBlock": {
          "$ref": "#/definitions/ts.CaseBlock"
        },
        "possiblyExhaustive": {
          "type": "boolean"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "caseBlock",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.SwitchStatement": {
      "type": "number",
      "enum": [
        237
      ]
    },
    "ts.DefaultClause": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.DefaultClause"
        },
        "parent": {
          "$ref": "#/definitions/ts.CaseBlock"
        },
        "statements": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "fallthroughFlowNode": {
          "$ref": "#/definitions/FlowNode"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "statements",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.DefaultClause": {
      "type": "number",
      "enum": [
        278
      ]
    },
    "ts.PrologueDirective": {
      "type": "object",
      "properties": {
        "expression": {
          "$ref": "#/definitions/ts.StringLiteral"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ExpressionStatement"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.IfStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.IfStatement"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "thenStatement": {
          "$ref": "#/definitions/ts.Statement"
        },
        "elseStatement": {
          "$ref": "#/definitions/ts.Statement"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "thenStatement",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.IfStatement": {
      "type": "number",
      "enum": [
        227
      ]
    },
    "ts.IterationStatement": {
      "type": "object",
      "properties": {
        "statement": {
          "$ref": "#/definitions/ts.Statement"
        },
        "_statementBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "statement",
        "transformFlags"
      ]
    },
    "ts.DoStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.DoStatement"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "statement": {
          "$ref": "#/definitions/ts.Statement"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "statement",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.DoStatement": {
      "type": "number",
      "enum": [
        228
      ]
    },
    "ts.WhileStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.WhileStatement"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "statement": {
          "$ref": "#/definitions/ts.Statement"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "statement",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.WhileStatement": {
      "type": "number",
      "enum": [
        229
      ]
    },
    "ts.ForInOrOfStatement": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.ForInStatement"
        },
        {
          "$ref": "#/definitions/ts.ForOfStatement"
        }
      ]
    },
    "ts.BreakStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.BreakStatement"
        },
        "label": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.BreakStatement": {
      "type": "number",
      "enum": [
        234
      ]
    },
    "ts.ContinueStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ContinueStatement"
        },
        "label": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ContinueStatement": {
      "type": "number",
      "enum": [
        233
      ]
    },
    "ts.BreakOrContinueStatement": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.BreakStatement"
        },
        {
          "$ref": "#/definitions/ts.ContinueStatement"
        }
      ]
    },
    "ts.ReturnStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ReturnStatement"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ReturnStatement": {
      "type": "number",
      "enum": [
        235
      ]
    },
    "ts.WithStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.WithStatement"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "statement": {
          "$ref": "#/definitions/ts.Statement"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "statement",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.WithStatement": {
      "type": "number",
      "enum": [
        236
      ]
    },
    "ts.CaseOrDefaultClause": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.CaseClause"
        },
        {
          "$ref": "#/definitions/ts.DefaultClause"
        }
      ]
    },
    "ts.ThrowStatement": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ThrowStatement"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ThrowStatement": {
      "type": "number",
      "enum": [
        239
      ]
    },
    "ts.DeclarationWithTypeParameters": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.CallSignatureDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ConstructSignatureDeclaration"
        },
        {
          "$ref": "#/definitions/ts.MethodSignature"
        },
        {
          "$ref": "#/definitions/ts.ArrowFunction"
        },
        {
          "$ref": "#/definitions/ts.FunctionExpression"
        },
        {
          "$ref": "#/definitions/ts.FunctionDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ConstructorDeclaration"
        },
        {
          "$ref": "#/definitions/ts.MethodDeclaration"
        },
        {
          "$ref": "#/definitions/ts.GetAccessorDeclaration"
        },
        {
          "$ref": "#/definitions/ts.SetAccessorDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ClassDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ClassExpression"
        },
        {
          "$ref": "#/definitions/ts.InterfaceDeclaration"
        },
        {
          "$ref": "#/definitions/ts.TypeAliasDeclaration"
        },
        {
          "$ref": "#/definitions/ts.IndexSignatureDeclaration"
        },
        {
          "$ref": "#/definitions/ts.FunctionTypeNode"
        },
        {
          "$ref": "#/definitions/ts.ConstructorTypeNode"
        },
        {
          "$ref": "#/definitions/ts.JSDocFunctionType"
        },
        {
          "$ref": "#/definitions/ts.JSDocTemplateTag"
        },
        {
          "$ref": "#/definitions/ts.JSDocTypedefTag"
        },
        {
          "$ref": "#/definitions/ts.JSDocCallbackTag"
        },
        {
          "$ref": "#/definitions/ts.JSDocSignature"
        }
      ]
    },
    "ts.JSDocTypedefTag": {
      "type": "object",
      "properties": {
        "parent": {
          "$ref": "#/definitions/ts.JSDoc"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocTypedefTag"
        },
        "fullName": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "$ref": "#/definitions/ts.JSDocNamespaceDeclaration"
            }
          ]
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "typeExpression": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JSDocTypeExpression"
            },
            {
              "$ref": "#/definitions/ts.JSDocTypeLiteral"
            }
          ]
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocTypedefTag": {
      "type": "number",
      "enum": [
        321
      ]
    },
    "ts.JSDocCallbackTag": {
      "type": "object",
      "properties": {
        "parent": {
          "$ref": "#/definitions/ts.JSDoc"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocCallbackTag"
        },
        "fullName": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "$ref": "#/definitions/ts.JSDocNamespaceDeclaration"
            }
          ]
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "typeExpression": {
          "$ref": "#/definitions/ts.JSDocSignature"
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags",
        "typeExpression"
      ]
    },
    "ts.SyntaxKind.JSDocCallbackTag": {
      "type": "number",
      "enum": [
        314
      ]
    },
    "ts.JSDocSignature": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocSignature"
        },
        "typeParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTemplateTag"
          }
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocParameterTag"
          }
        },
        "type": {
          "$ref": "#/definitions/ts.JSDocReturnTag"
        },
        "_jsDocTypeBrand": {},
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_jsDocTypeBrand",
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parameters",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocSignature": {
      "type": "number",
      "enum": [
        305
      ]
    },
    "ts.JSDocParameterTag": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocParameterTag"
        },
        "parent": {
          "$ref": "#/definitions/ts.JSDoc"
        },
        "name": {
          "$ref": "#/definitions/ts.EntityName"
        },
        "typeExpression": {
          "$ref": "#/definitions/ts.JSDocTypeExpression"
        },
        "isNameFirst": {
          "description": "Whether the property name came before the type -- non-standard for JSDoc, but Typescript-like",
          "type": "boolean"
        },
        "isBracketed": {
          "type": "boolean"
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "isBracketed",
        "isNameFirst",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocParameterTag": {
      "type": "number",
      "enum": [
        316
      ]
    },
    "ts.JSDocReturnTag": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocReturnTag"
        },
        "typeExpression": {
          "$ref": "#/definitions/ts.JSDocTypeExpression"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JSDoc"
            },
            {
              "$ref": "#/definitions/ts.JSDocTypeLiteral"
            }
          ]
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocReturnTag": {
      "type": "number",
      "enum": [
        317
      ]
    },
    "ts.DeclarationWithTypeParameterChildren": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.CallSignatureDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ConstructSignatureDeclaration"
        },
        {
          "$ref": "#/definitions/ts.MethodSignature"
        },
        {
          "$ref": "#/definitions/ts.ArrowFunction"
        },
        {
          "$ref": "#/definitions/ts.FunctionExpression"
        },
        {
          "$ref": "#/definitions/ts.FunctionDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ConstructorDeclaration"
        },
        {
          "$ref": "#/definitions/ts.MethodDeclaration"
        },
        {
          "$ref": "#/definitions/ts.GetAccessorDeclaration"
        },
        {
          "$ref": "#/definitions/ts.SetAccessorDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ClassDeclaration"
        },
        {
          "$ref": "#/definitions/ts.ClassExpression"
        },
        {
          "$ref": "#/definitions/ts.InterfaceDeclaration"
        },
        {
          "$ref": "#/definitions/ts.TypeAliasDeclaration"
        },
        {
          "$ref": "#/definitions/ts.IndexSignatureDeclaration"
        },
        {
          "$ref": "#/definitions/ts.FunctionTypeNode"
        },
        {
          "$ref": "#/definitions/ts.ConstructorTypeNode"
        },
        {
          "$ref": "#/definitions/ts.JSDocFunctionType"
        },
        {
          "$ref": "#/definitions/ts.JSDocTemplateTag"
        }
      ]
    },
    "ts.ClassLikeDeclarationBase": {
      "type": "object",
      "properties": {
        "kind": {
          "enum": [
            214,
            245
          ],
          "type": "number"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "typeParameters": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "heritageClauses": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "members": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "members",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.ModuleBody": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.Identifier"
        },
        {
          "$ref": "#/definitions/ts.ModuleBlock"
        },
        {
          "$ref": "#/definitions/ts.NamespaceDeclaration"
        },
        {
          "$ref": "#/definitions/ts.JSDocNamespaceDeclaration"
        }
      ]
    },
    "ts.AmbientModuleDeclaration": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/ts.ModuleBlock"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ModuleDeclaration"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "$ref": "#/definitions/ts.SourceFile"
            },
            {
              "$ref": "#/definitions/ts.ModuleBlock"
            },
            {
              "$ref": "#/definitions/ts.NamespaceDeclaration"
            },
            {
              "$ref": "#/definitions/ts.JSDocNamespaceDeclaration"
            }
          ]
        },
        "name": {
          "$ref": "#/definitions/ts.ModuleName"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_statementBrand": {},
        "jsDoc": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDoc"
          }
        },
        "jsDocCache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ts.JSDocTag"
          }
        }
      },
      "required": [
        "_declarationBrand",
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.ImportDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ImportDeclaration"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.SourceFile"
            },
            {
              "$ref": "#/definitions/ts.ModuleBlock"
            }
          ]
        },
        "importClause": {
          "$ref": "#/definitions/ts.ImportClause"
        },
        "moduleSpecifier": {
          "$ref": "#/definitions/ts.Expression",
          "description": "If this is not a StringLiteral it will be a grammar error."
        },
        "_statementBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "moduleSpecifier",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ImportDeclaration": {
      "type": "number",
      "enum": [
        254
      ]
    },
    "ts.ImportClause": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ImportClause"
        },
        "parent": {
          "$ref": "#/definitions/ts.ImportDeclaration"
        },
        "isTypeOnly": {
          "type": "boolean"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "namedBindings": {
          "$ref": "#/definitions/ts.NamedImportBindings"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "isTypeOnly",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ImportClause": {
      "type": "number",
      "enum": [
        255
      ]
    },
    "ts.NamedImportBindings": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.NamespaceImport"
        },
        {
          "$ref": "#/definitions/ts.NamedImports"
        }
      ]
    },
    "ts.NamespaceImport": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.NamespaceImport"
        },
        "parent": {
          "$ref": "#/definitions/ts.ImportClause"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.NamespaceImport": {
      "type": "number",
      "enum": [
        256
      ]
    },
    "ts.NamedImports": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.NamedImports"
        },
        "parent": {
          "$ref": "#/definitions/ts.ImportClause"
        },
        "elements": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "elements",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.NamedImports": {
      "type": "number",
      "enum": [
        257
      ]
    },
    "ts.ImportSpecifier": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ImportSpecifier"
        },
        "parent": {
          "$ref": "#/definitions/ts.NamedImports"
        },
        "propertyName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ImportSpecifier": {
      "type": "number",
      "enum": [
        258
      ]
    },
    "ts.NamespaceExportDeclaration": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.NamespaceExportDeclaration"
        },
        "name": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_statementBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_statementBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.NamespaceExportDeclaration": {
      "type": "number",
      "enum": [
        252
      ]
    },
    "ts.NamedImportsOrExports": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.NamedImports"
        },
        {
          "$ref": "#/definitions/ts.NamedExports"
        }
      ]
    },
    "ts.ImportOrExportSpecifier": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.ImportSpecifier"
        },
        {
          "$ref": "#/definitions/ts.ExportSpecifier"
        }
      ]
    },
    "ts.TypeOnlyCompatibleAliasDeclaration": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.NamespaceImport"
        },
        {
          "$ref": "#/definitions/ts.ImportClause"
        },
        {
          "$ref": "#/definitions/ts.ImportSpecifier"
        },
        {
          "$ref": "#/definitions/ts.ExportSpecifier"
        }
      ]
    },
    "ts.ExportAssignment": {
      "description": "This is either an `export =` or an `export default` declaration.\nUnless `isExportEquals` is set, this node was parsed as an `export default`.",
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.ExportAssignment"
        },
        "parent": {
          "$ref": "#/definitions/ts.SourceFile"
        },
        "isExportEquals": {
          "type": "boolean"
        },
        "expression": {
          "$ref": "#/definitions/ts.Expression"
        },
        "name": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.Identifier"
            },
            {
              "$ref": "#/definitions/ts.StringLiteral"
            },
            {
              "$ref": "#/definitions/ts.NumericLiteral"
            }
          ]
        },
        "_declarationBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_statementBrand": {}
      },
      "required": [
        "_declarationBrand",
        "_statementBrand",
        "end",
        "expression",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.ExportAssignment": {
      "type": "number",
      "enum": [
        259
      ]
    },
    "ts.CommentKind": {
      "enum": [
        2,
        3
      ],
      "type": "number"
    },
    "ts.CommentRange": {
      "type": "object",
      "properties": {
        "hasTrailingNewLine": {
          "type": "boolean"
        },
        "kind": {
          "$ref": "#/definitions/ts.CommentKind"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "kind",
        "pos"
      ]
    },
    "ts.SynthesizedComment": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "pos": {
          "type": "number",
          "enum": [
            -1
          ]
        },
        "end": {
          "type": "number",
          "enum": [
            -1
          ]
        },
        "hasTrailingNewLine": {
          "type": "boolean"
        },
        "kind": {
          "$ref": "#/definitions/ts.CommentKind"
        }
      },
      "required": [
        "end",
        "kind",
        "pos",
        "text"
      ]
    },
    "ts.JSDocType": {
      "type": "object",
      "properties": {
        "_jsDocTypeBrand": {},
        "_typeNodeBrand": {},
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_jsDocTypeBrand",
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.JSDocAllType": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocAllType"
        },
        "_jsDocTypeBrand": {},
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_jsDocTypeBrand",
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocAllType": {
      "type": "number",
      "enum": [
        295
      ]
    },
    "ts.JSDocUnknownType": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocUnknownType"
        },
        "_jsDocTypeBrand": {},
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_jsDocTypeBrand",
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocUnknownType": {
      "type": "number",
      "enum": [
        296
      ]
    },
    "ts.JSDocNonNullableType": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocNonNullableType"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "_jsDocTypeBrand": {},
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_jsDocTypeBrand",
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags",
        "type"
      ]
    },
    "ts.SyntaxKind.JSDocNonNullableType": {
      "type": "number",
      "enum": [
        298
      ]
    },
    "ts.JSDocNullableType": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocNullableType"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "_jsDocTypeBrand": {},
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_jsDocTypeBrand",
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags",
        "type"
      ]
    },
    "ts.SyntaxKind.JSDocNullableType": {
      "type": "number",
      "enum": [
        297
      ]
    },
    "ts.JSDocOptionalType": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocOptionalType"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "_jsDocTypeBrand": {},
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_jsDocTypeBrand",
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags",
        "type"
      ]
    },
    "ts.SyntaxKind.JSDocOptionalType": {
      "type": "number",
      "enum": [
        299
      ]
    },
    "ts.JSDocVariadicType": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocVariadicType"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "_jsDocTypeBrand": {},
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_jsDocTypeBrand",
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags",
        "type"
      ]
    },
    "ts.SyntaxKind.JSDocVariadicType": {
      "type": "number",
      "enum": [
        301
      ]
    },
    "ts.JSDocNamepathType": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocNamepathType"
        },
        "type": {
          "$ref": "#/definitions/ts.TypeNode"
        },
        "_jsDocTypeBrand": {},
        "_typeNodeBrand": {},
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/ts.Node"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "_jsDocTypeBrand",
        "_typeNodeBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "transformFlags",
        "type"
      ]
    },
    "ts.SyntaxKind.JSDocNamepathType": {
      "type": "number",
      "enum": [
        302
      ]
    },
    "ts.JSDocTypeReferencingNode": {
      "anyOf": [
        {
          "$ref": "#/definitions/ts.JSDocNonNullableType"
        },
        {
          "$ref": "#/definitions/ts.JSDocNullableType"
        },
        {
          "$ref": "#/definitions/ts.JSDocOptionalType"
        },
        {
          "$ref": "#/definitions/ts.JSDocVariadicType"
        }
      ]
    },
    "ts.JSDocUnknownTag": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocTag"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JSDoc"
            },
            {
              "$ref": "#/definitions/ts.JSDocTypeLiteral"
            }
          ]
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocTag": {
      "type": "number",
      "enum": [
        306
      ]
    },
    "ts.JSDocAuthorTag": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocAuthorTag"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JSDoc"
            },
            {
              "$ref": "#/definitions/ts.JSDocTypeLiteral"
            }
          ]
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocAuthorTag": {
      "type": "number",
      "enum": [
        308
      ]
    },
    "ts.JSDocClassTag": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocClassTag"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JSDoc"
            },
            {
              "$ref": "#/definitions/ts.JSDocTypeLiteral"
            }
          ]
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocClassTag": {
      "type": "number",
      "enum": [
        309
      ]
    },
    "ts.JSDocPublicTag": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocPublicTag"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JSDoc"
            },
            {
              "$ref": "#/definitions/ts.JSDocTypeLiteral"
            }
          ]
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocPublicTag": {
      "type": "number",
      "enum": [
        310
      ]
    },
    "ts.JSDocPrivateTag": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocPrivateTag"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JSDoc"
            },
            {
              "$ref": "#/definitions/ts.JSDocTypeLiteral"
            }
          ]
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocPrivateTag": {
      "type": "number",
      "enum": [
        311
      ]
    },
    "ts.JSDocProtectedTag": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocProtectedTag"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JSDoc"
            },
            {
              "$ref": "#/definitions/ts.JSDocTypeLiteral"
            }
          ]
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocProtectedTag": {
      "type": "number",
      "enum": [
        312
      ]
    },
    "ts.JSDocReadonlyTag": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocReadonlyTag"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JSDoc"
            },
            {
              "$ref": "#/definitions/ts.JSDocTypeLiteral"
            }
          ]
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocReadonlyTag": {
      "type": "number",
      "enum": [
        313
      ]
    },
    "ts.JSDocEnumTag": {
      "type": "object",
      "properties": {
        "parent": {
          "$ref": "#/definitions/ts.JSDoc"
        },
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocEnumTag"
        },
        "typeExpression": {
          "$ref": "#/definitions/ts.JSDocTypeExpression"
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocEnumTag": {
      "type": "number",
      "enum": [
        315
      ]
    },
    "ts.JSDocThisTag": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocThisTag"
        },
        "typeExpression": {
          "$ref": "#/definitions/ts.JSDocTypeExpression"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JSDoc"
            },
            {
              "$ref": "#/definitions/ts.JSDocTypeLiteral"
            }
          ]
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocThisTag": {
      "type": "number",
      "enum": [
        318
      ]
    },
    "ts.JSDocTypeTag": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocTypeTag"
        },
        "typeExpression": {
          "$ref": "#/definitions/ts.JSDocTypeExpression"
        },
        "parent": {
          "anyOf": [
            {
              "$ref": "#/definitions/ts.JSDoc"
            },
            {
              "$ref": "#/definitions/ts.JSDocTypeLiteral"
            }
          ]
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        }
      },
      "required": [
        "end",
        "flags",
        "kind",
        "modifierFlagsCache",
        "parent",
        "pos",
        "tagName",
        "transformFlags",
        "typeExpression"
      ]
    },
    "ts.SyntaxKind.JSDocTypeTag": {
      "type": "number",
      "enum": [
        319
      ]
    },
    "ts.JSDocPropertyTag": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ts.SyntaxKind.JSDocPropertyTag"
        },
        "parent": {
          "$ref": "#/definitions/ts.JSDoc"
        },
        "name": {
          "$ref": "#/definitions/ts.EntityName"
        },
        "typeExpression": {
          "$ref": "#/definitions/ts.JSDocTypeExpression"
        },
        "isNameFirst": {
          "description": "Whether the property name came before the type -- non-standard for JSDoc, but Typescript-like",
          "type": "boolean"
        },
        "isBracketed": {
          "type": "boolean"
        },
        "tagName": {
          "$ref": "#/definitions/ts.Identifier"
        },
        "comment": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/ts.NodeFlags"
        },
        "modifierFlagsCache": {
          "$ref": "#/definitions/ts.ModifierFlags"
        },
        "transformFlags": {
          "$ref": "#/definitions/TransformFlags"
        },
        "decorators": {
          "$ref": "#/definitions/ts.NodeArray"
        },
        "modifiers": {
          "$ref": "#/definitions/ts.ModifiersArray"
        },
        "id": {
          "type": "number"
        },
        "original": {
          "$ref": "#/definitions/ts.Node"
        },
        "pos": {
          "type": "number"
        },
        "end": {
          "type": "number"
        },
        "_declarationBrand": {}
      },
      "required": [
        "_declarationBrand",
        "end",
        "flags",
        "isBracketed",
        "isNameFirst",
        "kind",
        "modifierFlagsCache",
        "name",
        "parent",
        "pos",
        "tagName",
        "transformFlags"
      ]
    },
    "ts.SyntaxKind.JSDocPropertyTag": {
      "type": "number",
      "enum": [
        322
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}